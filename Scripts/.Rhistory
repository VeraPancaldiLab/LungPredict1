data = list()
for (i in 1:length(proportions)){
data[[i]] = data.frame("Sample" = rep(names(proportions)[i], length(cell_types)),
"Cells_types" = cell_types,
"Value" = unname(proportions[[i]]))}
data = bind_rows(data)
data$Patient = data$Sample
for (i in 1:nrow(data)) {
idx = which(coldata$pt_ID %in% data$Sample[i])
if(length(idx)>0){
data$Patient[i] = rownames(coldata)[idx]
}
}
p1 = ggplot(data) +
geom_bar(aes(x = Patient, y = Value, fill = Cells_types),
position = "stack", stat = "identity")
p1
P1
p1
ref = celldex::HumanPrimaryCellAtlasData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
Idents(seurat_anndata) = seurat_anndata@meta.data$singleR.labels #Rename clusters
#Convert("all_samples.h5ad", dest = "h5seurat", overwrite = T)
seurat_anndata = LoadH5Seurat("~/all_samples.h5seurat",  assays = "RNA")
DimPlot(seurat_anndata, reduction="umap")
ElbowPlot(seurat_anndata) #determine dimensionality of data
seurat_anndata = FindNeighbors(seurat_anndata, dims = 1:20)
seurat_anndata = FindClusters(seurat_anndata, resolution = 1)
DimPlot(seurat_anndata, reduction="umap", label = T)
ref = celldex::HumanPrimaryCellAtlasData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
Idents(seurat_anndata) = seurat_anndata@meta.data$singleR.labels #Rename clusters
ref = celldex::DatabaseImmuneCellExpressionData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
Idents(seurat_anndata) = seurat_anndata@meta.data$singleR.labels #Rename clusters
ref = celldex::MonacoImmuneData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
Idents(seurat_anndata) = seurat_anndata@meta.data$singleR.labels #Rename clusters
ref = celldex::BlueprintEncodeData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
Idents(seurat_anndata) = seurat_anndata@meta.data$singleR.labels #Rename clusters
library(Seurat)
library(SeuratDisk)
library(patchwork)
library(SingleR)
library(celldex)
#Convert("all_samples.h5ad", dest = "h5seurat", overwrite = T)
seurat_anndata = LoadH5Seurat("~/all_samples.h5seurat",  assays = "RNA")
Idents(seurat_anndata) = seurat_anndata@meta.data$annotated_ct_higher
pdf("Results/UMAP_ct_higher")
DimPlot(seurat_anndata, reduction="umap", label = T)
dev.off()
Idents(seurat_anndata) = seurat_anndata@meta.data$annotated_ct_higher
pdf("Results/UMAP_ct_higher", width = 10, height = 12)
DimPlot(seurat_anndata, reduction="umap", label = T)
dev.off()
Idents(seurat_anndata) = seurat_anndata@meta.data$annotated_ct_higher
pdf("Results/UMAP_ct_higher", width = 15, height = 5)
DimPlot(seurat_anndata, reduction="umap", label = T)
dev.off()
Idents(seurat_anndata) = seurat_anndata@meta.data$annotated_ct_higher
pdf("Results/UMAP_ct_higher", width = 8, height = 5)
DimPlot(seurat_anndata, reduction="umap", label = T)
dev.off()
Idents(seurat_anndata) = seurat_anndata@meta.data$annotated_ct
pdf("Results/UMAP_ct", width = 8, height = 5)
DimPlot(seurat_anndata, reduction="umap", label = T)
dev.off()
Idents(seurat_anndata) = seurat_anndata@meta.data$scorect
pdf("Results/UMAP_scorect", width = 8, height = 5)
DimPlot(seurat_anndata, reduction="umap", label = T)
dev.off()
DimPlot(seurat_anndata, reduction="umap")
ElbowPlot(seurat_anndata) #determine dimensionality of data
seurat_anndata = FindNeighbors(seurat_anndata, dims = 1:20)
seurat_anndata = FindClusters(seurat_anndata, resolution = 1)
DimPlot(seurat_anndata, reduction="umap", label = T)
pdf("Results/UMAP_clusters", width = 8, height = 5)
DimPlot(seurat_anndata, reduction="umap", label = T)
dev.off()
ref = celldex::HumanPrimaryCellAtlasData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
Idents(seurat_anndata) = seurat_anndata@meta.data$singleR.labels #Rename clusters
pdf("Results/UMAP_HCA", width = 8, height = 5)
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
dev.off()
pdf("Results/Heatmap_HCA", width = 8, height = 5)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
dev.off()
Idents(seurat_anndata)
ref = celldex::DatabaseImmuneCellExpressionData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
pdf("Results/UMAP_ICE", width = 8, height = 5)
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
dev.off()
head(pred$scores)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pdf("Results/Heatmap_ICE", width = 8, height = 5)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
dev.off()
ref = celldex::MonacoImmuneData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
pdf("Results/UMAP_Monaco", width = 8, height = 5)
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
dev.off()
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pdf("Results/Heatmap_Monaco", width = 8, height = 5)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
dev.off()
pdf("Results/Heatmap_Monaco", width = 8, height = 5)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
dev.off()
ref = celldex::BlueprintEncodeData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
pdf("Results/UMAP_BPE", width = 8, height = 5)
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
dev.off()
head(pred$scores)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pdf("Results/Heatmap_BPE", width = 8, height = 5)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
dev.off()
Idents(seurat_anndata)
ElbowPlot(seurat_anndata) #determine dimensionality of data
seurat_anndata = FindNeighbors(seurat_anndata, dims = 1:20)
seurat_anndata = FindClusters(seurat_anndata, resolution = 1)
pdf("Results/UMAP_clusters", width = 8, height = 5)
DimPlot(seurat_anndata, reduction="umap", label = T)
dev.off()
Idents(seurat_anndata)
NK8 = subset(seurat_anndata, idents = "8", invert = FALSE)
DimPlot(NK8, reduction="umap")
#Re-clustering
NK8 = FindNeighbors(NK8, dims = 1:20)
NK8 = FindClusters(NK8, algorithm= 1, resolution = 0.1)
NK8 <- RunUMAP(NK8, dims = 1:20)
DimPlot(NK8, reduction="umap", label = T, pt.size = 0.5)
NK8 = subset(seurat_anndata, idents = "8", invert = FALSE)
DimPlot(NK8, reduction="umap")
#Re-clustering
NK8 = FindNeighbors(NK8, dims = 1:20)
NK8 = FindClusters(NK8, algorithm= 1, resolution = 0.2)
NK8 <- RunUMAP(NK8, dims = 1:20)
DimPlot(NK8, reduction="umap", label = T, pt.size = 0.5)
pdf("Results/UMAP_NK", width = 8, height = 5)
DimPlot(NK8, reduction="umap", label = T, pt.size = 0.5)
dev.off()
#All markers
NK8.markersALL <- FindAllMarkers(NK8, only.pos = FALSE, min.pct = 0.1, logfc.threshold = 0.25)
write.csv(NK8.markersALL, "Results/NK8_markerALL.csv")
#Differential markers
NK8.markers01 <- FindMarkers(NK8, ident.1 = "0", ident.2 = "1")
head(NK8.markers01, 10)
write.csv(NK8.markers01, "Results/NK8.markers01.csv")
NK8.markers02 <- FindMarkers(NK8, ident.1 = "0", ident.2 = "2")
head(NK8.markers02, 10)
write.csv(NK8.markers02, "Results/NK8.markers02.csv")
NK8.markers12 <- FindMarkers(NK8, ident.1 = "1", ident.2 = "2")
head(NK8.markers12, 10)
write.csv(NK8.markers12, "Results/NK8.markers12.csv")
featuresNK = c("GNLY", "KLRK1", "KLRC2", "KLRC3", "CD3E", "NCAM1", "FCGR3A", "CD226", "GZMA", "GZMB", "GZMH", "GZMK", "PRF1", "TNF", "IFNG", "IL7R",
"KLF2", "S1PR5", "ITGAE", "ZNF683")
pdf("Results/FeaturePlot_NK", width = 8, height = 5)
FeaturePlot(NK8, features = featuresNK)
dev.off()
pdf("Results/ViolinPlot_NK", width = 8, height = 5)
VlnPlot(NK8, features = featuresNK, log = T)
dev.off()
pdf("Results/FeaturePlot_NK", width = 10, height = 8)
FeaturePlot(NK8, features = featuresNK)
dev.off()
pdf("Results/FeaturePlot_NK", width = 10, height = 10)
FeaturePlot(NK8, features = featuresNK)
dev.off()
pdf("Results/FeaturePlot_NK", width = 10, height = 15)
FeaturePlot(NK8, features = featuresNK)
dev.off()
pdf("Results/FeaturePlot_NK", width = 10, height = 8)
FeaturePlot(NK8, features = featuresNK, label.size = 3)
dev.off()
pdf("Results/FeaturePlot_NK", width = 10, height = 8)
FeaturePlot(NK8, features = featuresNK, label.size = 1)
dev.off()
pdf("Results/FeaturePlot_NK", width = 10, height = 8)
FeaturePlot(NK8, features = featuresNK)
dev.off()
pdf("Results/ViolinPlot_NK", width = 10, height = 8)
VlnPlot(NK8, features = featuresNK, log = T)
dev.off()
pdf("Results/ViolinPlot_NK", width = 10, height = 8)
VlnPlot(NK8, features = featuresNK, log = T, ncol = 5)
dev.off()
pdf("Results/FeaturePlot_NK", width = 10, height = 8)
FeaturePlot(NK8, features = featuresNK, ncol = 5)
dev.off()
pdf("Results/ViolinPlot_NK", width = 15, height = 8)
VlnPlot(NK8, features = featuresNK, log = T, ncol = 5)
dev.off()
new.cluster.ids <- c("Peripheral", "Dysfunctional", "Tissue-resident")
levels(NK8)
names(new.cluster.ids) <- levels(NK8)
new.cluster.ids
NK8 <- RenameIdents(NK8, new.cluster.ids)
DimPlot(NK8, reduction = "umap", label = TRUE, pt.size = 1) + NoLegend()
pdf("Results/UMAP_NK_annotated", width = 8, height = 5)
DimPlot(NK8, reduction = "umap", label = TRUE, pt.size = 1) + NoLegend()
dev.off()
NK8$NKclust = Idents(NK8)
Idents(NK8) = NK8@meta.data$sample
pdf("Results/UMAP_NK_patients.pdf", width = 8, height = 5)
DimPlot(NK8, reduction = "umap")
dev.off()
table(Idents(NK8))
Idents(NK8) = "NKclust"
# how many cells in each cluster
table(Idents(NK8))
table(Idents(NK8)) # how many cells in each cluster
table(NK8$sample) # how many cells per patient
table(Idents(NK8), NK8$sample) # how many cells per patient in each cluster
NKClustTable = table(Idents(NK8), NK8$sample) #Create data frame with number of cells per patient in each cluster
NKClustTable
NKClustPercPat = prop.table(table(Idents(NK8), NK8$sample), margin = 2)
NKClustPercPat = prop.table(table(Idents(NK8), NK8$sample), margin = 2)
NKClustPercPat
NKClustPercPat = data.frame(NKClustPercPat)
View(NKClustPercPat)
colnames(NKClustPercPat) = c("NK_Cluster", "PatientID", "CellProportion")
#Match with samples ID used in Vanderbilt analysis
clinical.data <- data.frame(read.csv("~/Documents/LungPredict1_complete/RawFiles/ColumnData_Vanderbilt.csv", row.names = 1))
View(clinical.data)
clinical.data = clinical.data[clinical.data$pt_ID%in%NKClustPercPat$PatientID,]
View(clinical.data)
samples = clinical.data$pt_ID
names(samples) = rownames(clinical.data)
samples
NKClustPercPat$PatientID[1]
which(samples == NKClustPercPat$PatientID[1])
for (i in 1:nrow(NKClustPercPat)) {
NKClustPercPat$Samples = names(samples)[which(samples == NKClustPercPat$PatientID[i])]
}
for (i in 1:nrow(NKClustPercPat)) {
NKClustPercPat$Samples[i] = names(samples)[which(samples == NKClustPercPat$PatientID[i])]
}
for (i in 1:nrow(NKClustPercPat)) {
idx = which(samples == NKClustPercPat$PatientID[i])
if(length(idx)>0){
NKClustPercPat$Samples[i] = names(samples)[idx]
}
}
for (i in 1:nrow(NKClustPercPat)) {
idx = which(samples == NKClustPercPat$PatientID[i])
if(length(idx)>0){
NKClustPercPat$Samples[i] = names(samples)[idx]
}else{
NKClustPercPat$Samples[i] = NKClustPercPat$PatientID[i]
}
}
NKClustPercPat$PatientID[4]
NKClustPercPat$PatientID[[4]]
NKClustPercPat = prop.table(table(Idents(NK8), NK8$sample), margin = 2) #Create data frame with proportion of cells per patient in each cluster
#Create data frame with proportions
NKClustPercPat = data.frame(NKClustPercPat)
colnames(NKClustPercPat) = c("NK_Cluster", "PatientID", "CellProportion")
#Match with samples ID used in Vanderbilt analysis
clinical.data <- data.frame(read.csv("~/Documents/LungPredict1_complete/RawFiles/ColumnData_Vanderbilt.csv", row.names = 1))
clinical.data = clinical.data[clinical.data$pt_ID%in%NKClustPercPat$PatientID,]
samples = clinical.data$pt_ID
names(samples) = rownames(clinical.data)
for (i in 1:nrow(NKClustPercPat)) {
idx = which(samples == NKClustPercPat$PatientID[i])
if(length(idx)>0){
NKClustPercPat$Samples[i] = names(samples)[idx]
}else{
NKClustPercPat$Samples[i] = NKClustPercPat$PatientID[i]
}
}
NKClustPercPat$Samples = NKClustPercPat$PatientID
for (i in 1:nrow(NKClustPercPat)) {
idx = which(samples == NKClustPercPat$PatientID[i])
if(length(idx)>0){
NKClustPercPat$Samples[i] = names(samples)[idx]
}
}
i = 1
NKClustPercPat$PatientID[i]
which(samples == NKClustPercPat$PatientID[i])
names(samples)[idx]
idx = which(samples == NKClustPercPat$PatientID[i])
names(samples)[idx]
for (i in 1:nrow(NKClustPercPat)) {
idx = which(samples == NKClustPercPat$PatientID[i])
if(length(idx)>0){
NKClustPercPat$Samples[i] = as.factor(names(samples)[idx])
}
}
NKClustPercPat$Samples = as.character(NKClustPercPat$PatientID)
for (i in 1:nrow(NKClustPercPat)) {
idx = which(samples == NKClustPercPat$PatientID[i])
if(length(idx)>0){
NKClustPercPat$Samples[i] = names(samples)[idx]
}
}
NKClustPat = ggplot(data = NKClustPercPat, aes(x=Samples, y=CellProportion, fill=NK_Cluster, label = CellProportion)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
library(ggplot2)
NKClustPat = ggplot(data = NKClustPercPat, aes(x=Samples, y=CellProportion, fill=NK_Cluster, label = CellProportion)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
pdf("Results/Barplot_NK_Cluster.pdf")
NKClustPat
dev.off()
pdf("Results/Barplot_NK_Cluster.pdf", width = 10, height = 5)
NKClustPat
dev.off()
NKClustPat = ggplot(data = NKClustPercPat, aes(x=Samples, y=CellProportion, fill=NK_Cluster, label = CellProportion)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
pdf("Results/Barplot_NK_Cluster.pdf", width = 10, height = 5)
NKClustPat
dev.off()
View(clinical.data)
save.image("~/Documents/CellTFusion/user_projects/scRNAseq_Vanderbilt_results.RData")
View(NKClustPercPat)
summary(NKClustPercPat[NK_Cluster == "Peripheral"])
summary(NKClustPercPat[NKClustPercPat$NK_Cluster == "Peripheral"],)
summary(NKClustPercPat[NKClustPercPat$NK_Cluster == "Peripheral",])
NKClustPercPat[NKClustPercPat$NK_Cluster == "Peripheral",]
NKClustPercPat[NKClustPercPat$NK_Cluster == "Peripheral",][3]
summary(NKClustPercPat[NKClustPercPat$NK_Cluster == "Peripheral",])[3]
summary(NKClustPercPat[NKClustPercPat$NK_Cluster == "Peripheral",][,3])
seq(1,10,2)
j = 1
max(NKClustPercPat$CellProportion[j:j+2])
NKClustPercPat$CellProportion[j:j+2]
NKClustPercPat$CellProportion[1:3]
max(NKClustPercPat$CellProportion[1:3])
max(NKClustPercPat$CellProportion[j:3])
max(NKClustPercPat$CellProportion[j:(j+2)])
max(NKClustPercPat$CellProportion[j:j+2])
for (j in seq(1,nrow(NKClustPercPat),3)) {
idx = which.max(NKClustPercPat$CellProportion[j:(j+2)])
NKClustPercPat$Level[j:(j+2)] = NKClustPercPat$NK_Cluster[idx]
}
for (j in seq(1,nrow(NKClustPercPat),3)) {
idx = which.max(NKClustPercPat$CellProportion[j:(j+2)])
NKClustPercPat$Level[j:(j+2)] = as.character(NKClustPercPat$NK_Cluster[idx])
}
NKClustPat = ggplot(data = NKClustPercPat, aes(x=Samples, y=CellProportion, fill=NK_Cluster, label = CellProportion)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, color = NKClustPercPat$level))
pdf("Results/Barplot_NK_Cluster.pdf", width = 10, height = 5)
NKClustPat
dev.off()
getwd()
NKClustPat = ggplot(data = NKClustPercPat, aes(x=Samples, y=CellProportion, fill=NK_Cluster, label = CellProportion)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, color = NKClustPercPat$level))
level_colors <- c("Dysfunctional" = "red", "Peripheral" = "blue", "Tissue-resident" = "green")
NKClustPat = ggplot(data = NKClustPercPat, aes(x=Samples, y=CellProportion, fill=NK_Cluster, label = CellProportion)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, color = level_colors))
pdf("Results/Barplot_NK_Cluster.pdf", width = 10, height = 5)
NKClustPat
dev.off()
NKClustPat = ggplot(data = NKClustPercPat, aes(x=Samples, y=CellProportion, fill=NK_Cluster, label = CellProportion)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, color = level_colors[NKClustPercPat$level]))
pdf("Results/Barplot_NK_Cluster.pdf", width = 10, height = 5)
NKClustPat
NKClustPat = ggplot(data = NKClustPercPat, aes(x=Samples, y=CellProportion, fill=NK_Cluster, label = CellProportion)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, color = level_colors[NKClustPercPat$Level]))
pdf("Results/Barplot_NK_Cluster.pdf", width = 10, height = 5)
NKClustPat
dev.off()
NKClustPercPat$Level
level_colors
level_colors[NKClustPercPat$Level]
level = c()
for (j in seq(1,nrow(NKClustPercPat),3)) {
idx = which.max(NKClustPercPat$CellProportion[j:(j+2)])
level = c(level, as.character(NKClustPercPat$NK_Cluster[idx]))
}
level
level_colors <- c("Dysfunctional" = "red", "Peripheral" = "blue", "Tissue-resident" = "green")
NKClustPat = ggplot(data = NKClustPercPat, aes(x=Samples, y=CellProportion, fill=NK_Cluster, label = CellProportion)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1, color = level_colors[level]))
pdf("Results/Barplot_NK_Cluster.pdf", width = 10, height = 5)
NKClustPat
dev.off()
level_colors[level]
NKClustPat = ggplot(data = NKClustPercPat, aes(x=Samples, y=CellProportion, fill=NK_Cluster, label = CellProportion)) +
geom_bar(stat = "identity") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
pdf("Results/Barplot_NK_Cluster.pdf", width = 10, height = 5)
NKClustPat
dev.off()
save.image("~/Documents/CellTFusion/user_projects/scRNAseq_Vanderbilt_results.RData")
load("~/Documents/CellTFusion/user_projects/scRNAseq_Vanderbilt_results.RData")
pak::pkg_install("omnideconv/omnideconv", dependencies = TRUE)
omnideconv::install_all_python()
library(BayesPrism)
View(seurat_anndata@meta.data)
seurat_anndata@meta.data$new_annotation = as.character(seurat_anndata@meta.data$annotated_ct)
Idents(seurat_anndata) = seurat_anndata@meta.data$new_annotation
DimPlot(seurat_anndata, reduction="umap", label = T, pt.size = 1)
library(Seurat)
library(SeuratDisk)
library(patchwork)
library(SingleR)
library(celldex)
library(ggplot2)
set.seed(123)
DimPlot(seurat_anndata, reduction="umap", label = T, pt.size = 1)
rownames(NK8@meta.data)
DimPlot(NK8, reduction = "umap", label = TRUE, pt.size = 1) + NoLegend()
DimPlot(NK8, reduction = "umap")
Idents(NK8)
which(Idents(NK8) == "Dysfunctional")
##NK cells
dysfunctional = rownames(NK8@meta.data)[which(Idents(NK8) == "Dysfunctional")]
tissue_resident = rownames(NK8@meta.data)[which(Idents(NK8) == "Tissue-resident")]
peripheral = rownames(NK8@meta.data)[which(Idents(NK8) == "Peripheral")]
seurat_anndata@meta.data$new_annotation[which(rownames(seurat_anndata@meta.data) %in% dysfunctional)] = "Dysfunctional"
seurat_anndata@meta.data$new_annotation[which(rownames(seurat_anndata@meta.data) %in% tissue_resident)] = "Tissue-resident"
seurat_anndata@meta.data$new_annotation[which(rownames(seurat_anndata@meta.data) %in% peripheral)] = "Peripheral"
seurat_anndata@meta.data$new_annotation = as.factor(seurat_anndata@meta.data$new_annotation)
Idents(seurat_anndata) = seurat_anndata@meta.data$new_annotation
DimPlot(seurat_anndata, reduction="umap", label = T, pt.size = 1)
DimPlot(seurat_anndata, reduction="umap", label = T, pt.size = 1)
View(seurat_anndata@meta.data)
which(seurat_anndata@meta.data$new_annotation %in% "NK cells")
seurat_anndata = seurat_anndata[-which(seurat_anndata@meta.data$new_annotation %in% "NK cells"),]
View(seurat_anndata@meta.data)
seurat_anndata = seurat_anndata[-which(seurat_anndata@meta.data$new_annotation %in% "NK cells")]
