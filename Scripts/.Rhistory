clinical.data <- data.frame(read.csv("../../RawFiles/ColumnData_LungPredict.csv", row.names = 1))
# Compute the position of labels
data <- count(clinical.data$Smoking_Status) %>%
mutate(prop = (freq/nrow(clinical.data))*100) %>%
arrange(desc(x)) %>%
mutate(lab.ypos = cumsum(prop) - 0.5*prop)
View(data)
data$x[2] = "Ex-smoker"
ggplot(data, aes(x = "", y = round(prop), fill = as.factor(x))) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y=lab.ypos, label = paste0(round(prop), " %")), size=6, color = "black")+
theme_void() +
theme(legend.title = element_text(colour="black", size=15, face="bold"), legend.text = element_text(size=15))+
labs(title = "Patients by Smoking Status",
fill = "Smoking Status") +
scale_fill_manual(values = c("#EA6A47", "#1C4E80", "#A5D8DD"), breaks = c('Old', 'No', 'Yes'), labels=c('Old', 'Never', 'Current'))
ggplot(data, aes(x = "", y = round(prop), fill = as.factor(x))) +
geom_bar(width = 1, stat = "identity", color = "white") +
coord_polar("y", start = 0)+
geom_text(aes(y=lab.ypos, label = paste0(round(prop), " %")), size=6, color = "black")+
theme_void() +
theme(legend.title = element_text(colour="black", size=15, face="bold"), legend.text = element_text(size=15))+
labs(title = "Patients by Smoking Status",
fill = "Smoking Status") +
scale_fill_manual(values = c("#EA6A47", "#1C4E80", "#A5D8DD"), breaks = c('Ex-smoker', 'No', 'Yes'), labels=c('Ex-smoker', 'Never', 'Current'))
source("environment_set.R")
libraries_set()
source("environment_set.R")
libraries_set()
install.packages("Matrix", version = "1.6.4")
remove.packages("SeuratObject")
remove.packages("Matrix")
# Restart R-session
install.packages("SeuratObject")
libraries_set()
install.packages("local/path/to/Matrix_1.6-4.tar.gz", repos = NULL, type="source")
install.packages("~/Downloads//Matrix_1.6-4.tar.gz", repos = NULL, type="source")
libraries_set()
library(Matrix)
detach("package:MatrixGenerics", unload = TRUE)
library(MatrixGenerics)
library(SeuratObject)
library("SeuratObject")
libraries_set()
source("environment_set.R")
libraries_set()
remotes::install_github("mojaveazure/seurat-disk")
install.packages("hdf5r")
library(Seurat)
library(SeuratDisk)
library(patchwork)
library(SingleR)
library(celldex)
#Convert("all_samples.h5ad", dest = "h5seurat", overwrite = T)
seurat_anndata = LoadH5Seurat("~/all_samples.h5seurat",  assays = "RNA")
DimPlot(seurat_anndata, reduction="umap")
ElbowPlot(seurat_anndata) #determine dimensionality of data
seurat_anndata = FindNeighbors(seurat_anndata, dims = 1:20)
seurat_anndata = FindClusters(seurat_anndata, resolution = 1)
DimPlot(seurat_anndata, reduction="umap", label = T)
Idents(seurat_anndata)
NK268 = subset(seurat_anndata, idents = c("2", "6","8"), invert = FALSE)
DimPlot(NK268, reduction="umap")
#Re-clustering
NK268 = FindNeighbors(NK268, dims = 1:20)
NK268 = FindClusters(NK268, algorithm= 1, resolution = 0.1)
DimPlot(NK268, reduction = "umap", label = T)
NK268 <- RunUMAP(NK268, dims = 1:20)
DimPlot(NK268, reduction="umap", label = T, pt.size = 0.5) +
NoLegend() + ggtitle('NK268 cells')
DimPlot(NK268, reduction="umap", label = T, pt.size = 0.5)
featuresNK = c("GNLY", "KLRK1", "KLRC2", "KLRC3", "CD3E", "NCAM1", "FCGR3A", "CD226", "GZMA", "GZMB", "GZMH", "GZMK", "PRF1", "TNF", "IFNG", "IL7R")
FeaturePlot(NK268, features = featuresNK)
VlnPlot(NK268, features = featuresNK, log = T)
NK8 = subset(seurat_anndata, idents = "8", invert = FALSE)
DimPlot(NK8, reduction="umap")
#Re-clustering
NK8 = FindNeighbors(NK8, dims = 1:20)
NK8 = FindClusters(NK8, algorithm= 1, resolution = 0.1)
NK8 <- RunUMAP(NK8, dims = 1:20)
DimPlot(NK8, reduction="umap", label = T, pt.size = 0.5)
VlnPlot(NK8, features = featuresNK, log = T)
markers = FindMarkers(NK8, ident.1 = "0", ident.2 = "1")
head(markers, n=20)
VlnPlot(NK8, features = featuresNK, log = T)
markers = FindMarkers(NK8, ident.1 = "0", ident.2 = "1")
head(markers, n=20)
NK68 = subset(seurat_anndata, idents = c("6","8"), invert = FALSE)
DimPlot(NK68, reduction="umap")
#Re-clustering
NK68 = FindNeighbors(NK68, dims = 1:20)
NK68 = FindClusters(NK68, algorithm= 1, resolution = 0.1)
NK68 <- RunUMAP(NK68, dims = 1:20)
DimPlot(NK68, reduction="umap", label = T, pt.size = 0.5)
VlnPlot(NK68, features = featuresNK, log = T)
markers = FindMarkers(NK68, ident.1 = "0", ident.2 = "1")
head(markers, n=20)
VlnPlot(NK68, features = featuresNK, log = T)
VlnPlot(NK68, features = "KLF2", log = T)
VlnPlot(NK68, features = "ITGAE", log = T)
VlnPlot(NK68, features = "ZNF683", log = T)
VlnPlot(NK68, features = "KLRK1", log = T)
NK68@meta.data$sample
levels(subcluster)
subcluster = NK68
levels(subcluster)
levels(subcluster@meta.data$sample)
subcluster = NK68
total = list()
patients = levels(subcluster@meta.data$sample)
for (i in 1:length(patients)) {
total[[i]] = subcluster@meta.data %>%
filter(sample %in% patients[i])
}
library(dplyr)
library(tibble)
library(dplyr)
library(tibble)
subcluster = NK68
total = list()
patients = levels(subcluster@meta.data$sample)
for (i in 1:length(patients)) {
total[[i]] = subcluster@meta.data %>%
filter(sample %in% patients[i])
}
names(total) = patients
cell_types = levels(subcluster)
cells = list()
counts = c()
for (i in 1:length(total)) {
for (j in 1:length(cell_types)) {
data = total[[i]] %>%
filter(new_annotation %in% cell_types[j])
counts = c(counts, nrow(data))
}
counts = as.vector(counts)
names(counts) = cell_types
cells[[i]] = counts
counts = c()
}
subcluster = NK68
total = list()
patients = levels(subcluster@meta.data$sample)
for (i in 1:length(patients)) {
total[[i]] = subcluster@meta.data %>%
filter(sample %in% patients[i])
}
names(total) = patients
cell_types = levels(subcluster)
cells = list()
counts = c()
View(total)
total[["8356"]][["RNA_snn_res.0.1"]]
total[["8356"]][["seurat_clusters"]]
library(dplyr)
library(tibble)
subcluster = NK68
total = list()
patients = levels(subcluster@meta.data$sample)
for (i in 1:length(patients)) {
total[[i]] = subcluster@meta.data %>%
filter(sample %in% patients[i])
}
names(total) = patients
cell_types = levels(subcluster)
cells = list()
counts = c()
for (i in 1:length(total)) {
for (j in 1:length(cell_types)) {
data = total[[i]] %>%
filter(seurat_clusters %in% cell_types[j])
counts = c(counts, nrow(data))
}
counts = as.vector(counts)
names(counts) = cell_types
cells[[i]] = counts
counts = c()
}
names(cells) = patients
proportions = list()
ratio = c()
for (i in 1:length(cells)) {
for (j in cell_types) {
ratio = c(ratio, round(cells[[i]][[j]]/nrow(total[[i]]), 6))
}
ratio = as.vector(ratio)
names(ratio) = cell_types
proportions[[i]] = ratio
ratio = c()
}
names(proportions) = patients
View(proportions)
##Prepare data
data = list()
for (i in 1:length(proportions)){
data[[i]] = data.frame("Sample" = rep(names(proportions)[i], length(cell_types)),
"Cells_types" = cell_types,
"Value" = unname(proportions[[i]]))}
data = bind_rows(data)
p1 = ggplot(data) +
geom_bar(aes(x = Sample, y = Value, fill = Cells_types),
position = "stack", stat = "identity")
library(ggplot2)
##Prepare data
data = list()
for (i in 1:length(proportions)){
data[[i]] = data.frame("Sample" = rep(names(proportions)[i], length(cell_types)),
"Cells_types" = cell_types,
"Value" = unname(proportions[[i]]))}
data = bind_rows(data)
p1 = ggplot(data) +
geom_bar(aes(x = Sample, y = Value, fill = Cells_types),
position = "stack", stat = "identity")
p1
View(data)
Clust0 = data %>%
filter(Cells_types == "0") %>%
mutate("Level" = ifelse(Value > summary(Value)[5], "High", "Low"))
Clust1 = data %>%
filter(Cells_types == "1") %>%
mutate("Level" = ifelse(Value > summary(Value)[5], "High", "Low"))
result = data %>%
mutate("Level_0" = ifelse(Sample %in% Clust0$Sample[Clust0$Level=="High"], "High", "Low")) %>%
mutate("Level_1" = ifelse(Sample %in% Clust1$Sample[Clust1$Level=="High"], "High","Low")) %>%
filter(!(Level_0 == "High" & Level_1 == "High"))
result_exhaustive = result %>%
filter(Level_0 == "High") %>%
group_by(Cells_types) %>%
summarise(mean = mean(Value)) %>%
mutate("Condition" = "Cluster 0")
result_active = result %>%
filter(Level_1 == "High") %>%
group_by(Cells_types) %>%
summarise(mean = mean(Value)) %>%
mutate("Condition" = "Cluster 1")
data_res = rbind(result_exhaustive, result_active)
p4 = ggplot(data_res) +
geom_bar(aes(x = Condition, y = mean, fill = Cells_types),
position = "stack", stat = "identity", width = 0.5) +
scale_fill_manual(values = c("grey","black","skyblue","green","yellow","purple","brown","pink","red",
"blue", "lightblue", "cyan", "coral", "darkmagenta", "cornsilk","aquamarine","darkgreen","darkblue"))
p4
levels(seurat_anndata@meta.data$sample)
clinical.data <- data.frame(read.csv("~/Documents/LungPredict1_complete/RawFiles/ColumnData_Vanderbilt.csv", row.names = 1))
clinical.data <- clinical.data[,c(1,5,6,9,11,13)]
coldata = clinical.data[clinical.data$pt_ID%in%levels(seurat_anndata@meta.data$sample),]
#14958 14965 11817 13634 15467 12929  8356 12889 15002
#"R3388_YZ_1"  "R3388_YZ_2"  "R3388_YZ_10" "R3388_YZ_11" "R3388_YZ_18" "R3388_YZ_28" "R3388_YZ_56" "R4163_YZ_16" "R4163_YZ_25"
View(coldata)
levels(seurat_anndata@meta.data$sample)
clinical.data <- data.frame(read.csv("~/Documents/LungPredict1_complete/RawFiles/ColumnData_Vanderbilt.csv", row.names = 1))
clinical.data <- clinical.data[,c(1,5,6,9,11,13)]
View(clinical.data)
View(data)
which(data$Sample%in%clinical.data$pt_ID)
data$Sample
clinical.data$pt_ID
which(clinical.data$pt_ID%in%data$Sample)
data$Sample
which(data$Sample%in%clinical.data$pt_ID)
data$Sample
which(clinical.data$pt_ID%in%data$Sample)
data$Sample[1]
which(clinical.data$pt_ID %in% data$Sample[1])
rownames(clinical.data)[which(clinical.data$pt_ID %in% data$Sample[1])]
for (i in 1:nrow(data)) {
data$Patient = rownames(clinical.data)[which(clinical.data$pt_ID %in% data$Sample[i])]
}
levels(seurat_anndata@meta.data$sample)
clinical.data <- data.frame(read.csv("~/Documents/LungPredict1_complete/RawFiles/ColumnData_Vanderbilt.csv", row.names = 1))
clinical.data <- clinical.data[,c(1,5,6,9,11,13)]
coldata = clinical.data[clinical.data$pt_ID%in%levels(seurat_anndata@meta.data$sample),]
#14958 14965 11817 13634 15467 12929  8356 12889 15002
#"R3388_YZ_1"  "R3388_YZ_2"  "R3388_YZ_10" "R3388_YZ_11" "R3388_YZ_18" "R3388_YZ_28" "R3388_YZ_56" "R4163_YZ_16" "R4163_YZ_25"
View(coldata)
library(ggplot2)
##Prepare data
data = list()
for (i in 1:length(proportions)){
data[[i]] = data.frame("Sample" = rep(names(proportions)[i], length(cell_types)),
"Cells_types" = cell_types,
"Value" = unname(proportions[[i]]))}
data = bind_rows(data)
data$Patient = data$Sample
for (i in 1:nrow(data)) {
data$Patient[i] = rownames(coldata)[which(coldata$pt_ID %in% data$Sample[i])]
}
library(ggplot2)
##Prepare data
data = list()
for (i in 1:length(proportions)){
data[[i]] = data.frame("Sample" = rep(names(proportions)[i], length(cell_types)),
"Cells_types" = cell_types,
"Value" = unname(proportions[[i]]))}
data = bind_rows(data)
data$Patient = data$Sample
for (i in 1:nrow(data)) {
idx = which(coldata$pt_ID %in% data$Sample[i])
if(length(idx)>0){
data$Patient[i] = rownames(coldata)[idx]
}
}
p1 = ggplot(data) +
geom_bar(aes(x = Sample, y = Value, fill = Cells_types),
position = "stack", stat = "identity")
p1
library(ggplot2)
##Prepare data
data = list()
for (i in 1:length(proportions)){
data[[i]] = data.frame("Sample" = rep(names(proportions)[i], length(cell_types)),
"Cells_types" = cell_types,
"Value" = unname(proportions[[i]]))}
data = bind_rows(data)
data$Patient = data$Sample
for (i in 1:nrow(data)) {
idx = which(coldata$pt_ID %in% data$Sample[i])
if(length(idx)>0){
data$Patient[i] = rownames(coldata)[idx]
}
}
p1 = ggplot(data) +
geom_bar(aes(x = Patient, y = Value, fill = Cells_types),
position = "stack", stat = "identity")
p1
Idents(seurat_anndata) = seurat_anndata@meta.data$annotated_ct_higher
DimPlot(seurat_anndata, reduction="umap", label = T)
Idents(seurat_anndata) = seurat_anndata@meta.data$annotated_ct
DimPlot(seurat_anndata, reduction="umap", label = T)
Idents(seurat_anndata) = seurat_anndata@meta.data$scorect
DimPlot(seurat_anndata, reduction="umap", label = T)
Idents(seurat_anndata) = seurat_anndata@meta.data$annotated_ct
Idents(seurat_anndata)
View(seurat_anndata@meta.data)
Idents(seurat_anndata) = seurat_anndata@meta.data$annotated_ct
NK = subset(seurat_anndata, idents = c("NK cells"), invert = FALSE)
DimPlot(NK, reduction="umap")
#Re-clustering
NK = FindNeighbors(NK, dims = 1:20)
NK = FindClusters(NK, algorithm= 1, resolution = 0.1)
NK <- RunUMAP(NK, dims = 1:20)
DimPlot(NK, reduction="umap", label = T, pt.size = 0.5)
VlnPlot(NK68, features = featuresNK, log = T)
markers = FindMarkers(NK68, ident.1 = "0", ident.2 = "1")
head(markers, n=20)
VlnPlot(NK68, features = "KLF2", log = T)
counts <- data.frame(read.csv("~/Documents/LungPredict1_complete/RawFiles/CountData_Vanderbilt.csv", row.names = 1))
View(coldata)
View(counts)
coldata = coldata[rownames(coldata)%in%colnames(counts),]
View(coldata)
which(colnames(counts)=="R3388_YZ_18")
View(clinical.data)
Counts_Vanderbilt <- read.csv("~/Documents/CellTFusion/user_projects/Counts_Vanderbilt.csv", row.names=1)
View(Counts_Vanderbilt)
featuresNK = c("GNLY", "KLRK1", "KLRC2", "KLRC3", "CD3E", "NCAM1", "FCGR3A", "CD226", "GZMA", "GZMB", "GZMH", "GZMK", "PRF1", "TNF", "IFNG", "IL7R",
"KLF2", "S1PR5", "ITGAE", "ZNF683")
FeaturePlot(NK268, features = featuresNK)
VlnPlot(NK268, features = featuresNK, log = T)
VlnPlot(NK268, features = featuresNK, log = T)
VlnPlot(NK8, features = featuresNK, log = T)
VlnPlot(NK8, features = featuresNK, log = T)
VlnPlot(NK68, features = featuresNK, log = T)
VlnPlot(NK, features = featuresNK, log = T)
markers = FindMarkers(NK, ident.1 = "0", ident.2 = "1")
head(markers, n=20)
VlnPlot(NK, features = featuresNK, log = T)
library(dplyr)
library(tibble)
subcluster = NK
total = list()
patients = levels(subcluster@meta.data$sample)
for (i in 1:length(patients)) {
total[[i]] = subcluster@meta.data %>%
filter(sample %in% patients[i])
}
names(total) = patients
cell_types = levels(subcluster)
cells = list()
counts = c()
for (i in 1:length(total)) {
for (j in 1:length(cell_types)) {
data = total[[i]] %>%
filter(seurat_clusters %in% cell_types[j])
counts = c(counts, nrow(data))
}
counts = as.vector(counts)
names(counts) = cell_types
cells[[i]] = counts
counts = c()
}
names(cells) = patients
proportions = list()
ratio = c()
for (i in 1:length(cells)) {
for (j in cell_types) {
ratio = c(ratio, round(cells[[i]][[j]]/nrow(total[[i]]), 6))
}
ratio = as.vector(ratio)
names(ratio) = cell_types
proportions[[i]] = ratio
ratio = c()
}
names(proportions) = patients
levels(seurat_anndata@meta.data$sample)
clinical.data <- data.frame(read.csv("~/Documents/LungPredict1_complete/RawFiles/ColumnData_Vanderbilt.csv", row.names = 1))
clinical.data <- clinical.data[,c(1,5,6,9,11,13)]
counts <- data.frame(read.csv("~/Documents/LungPredict1_complete/RawFiles/CountData_Vanderbilt.csv", row.names = 1))
coldata = clinical.data[clinical.data$pt_ID%in%levels(seurat_anndata@meta.data$sample),]
coldata = coldata[rownames(coldata)%in%colnames(counts),]
#14958 14965 11817 13634 15467 12929  8356 12889 15002
#"R3388_YZ_1"  "R3388_YZ_2"  "R3388_YZ_10" "R3388_YZ_11" "R3388_YZ_18" "R3388_YZ_28" "R3388_YZ_56" "R4163_YZ_16" "R4163_YZ_25"
levels(seurat_anndata@meta.data$sample)
clinical.data <- data.frame(read.csv("~/Documents/LungPredict1_complete/RawFiles/ColumnData_Vanderbilt.csv", row.names = 1))
clinical.data <- clinical.data[,c(1,5,6,9,11,13)]
coldata = clinical.data[clinical.data$pt_ID%in%levels(seurat_anndata@meta.data$sample),]
#14958 14965 11817 13634 15467 12929  8356 12889 15002
#"R3388_YZ_1"  "R3388_YZ_2"  "R3388_YZ_10" "R3388_YZ_11" "R3388_YZ_18" "R3388_YZ_28" "R3388_YZ_56" "R4163_YZ_16" "R4163_YZ_25"
library(ggplot2)
##Prepare data
data = list()
for (i in 1:length(proportions)){
data[[i]] = data.frame("Sample" = rep(names(proportions)[i], length(cell_types)),
"Cells_types" = cell_types,
"Value" = unname(proportions[[i]]))}
data = bind_rows(data)
data$Patient = data$Sample
for (i in 1:nrow(data)) {
idx = which(coldata$pt_ID %in% data$Sample[i])
if(length(idx)>0){
data$Patient[i] = rownames(coldata)[idx]
}
}
p1 = ggplot(data) +
geom_bar(aes(x = Patient, y = Value, fill = Cells_types),
position = "stack", stat = "identity")
p1
P1
p1
ref = celldex::HumanPrimaryCellAtlasData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
Idents(seurat_anndata) = seurat_anndata@meta.data$singleR.labels #Rename clusters
#Convert("all_samples.h5ad", dest = "h5seurat", overwrite = T)
seurat_anndata = LoadH5Seurat("~/all_samples.h5seurat",  assays = "RNA")
DimPlot(seurat_anndata, reduction="umap")
ElbowPlot(seurat_anndata) #determine dimensionality of data
seurat_anndata = FindNeighbors(seurat_anndata, dims = 1:20)
seurat_anndata = FindClusters(seurat_anndata, resolution = 1)
DimPlot(seurat_anndata, reduction="umap", label = T)
ref = celldex::HumanPrimaryCellAtlasData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
Idents(seurat_anndata) = seurat_anndata@meta.data$singleR.labels #Rename clusters
ref = celldex::DatabaseImmuneCellExpressionData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
Idents(seurat_anndata) = seurat_anndata@meta.data$singleR.labels #Rename clusters
ref = celldex::MonacoImmuneData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
Idents(seurat_anndata) = seurat_anndata@meta.data$singleR.labels #Rename clusters
ref = celldex::BlueprintEncodeData()
single_counts = GetAssayData(seurat_anndata, slot='counts')
pred = SingleR(test = single_counts,
ref = ref,
labels = ref$label.main)
seurat_anndata$singleR.labels = pred$labels[match(rownames(seurat_anndata@meta.data), rownames(pred))]
DimPlot(seurat_anndata, reduction = 'umap', group.by = 'singleR.labels')
head(pred$scores)
plotScoreHeatmap(pred)
plotDeltaDistribution(pred)
tab = table(Assigned = pred$labels, Clusters = seurat_anndata$seurat_clusters)
pheatmap::pheatmap(log10(tab+10), color=colorRampPalette(c('white', 'blue'))(10))
Idents(seurat_anndata) = seurat_anndata@meta.data$singleR.labels #Rename clusters
