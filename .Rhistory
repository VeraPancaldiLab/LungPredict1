terminate = FALSE
iteration = 1
while (terminate == FALSE) {
corr_df <- correlation(data.matrix(data))
vec = colnames(data)
indice = 1
subgroup = list()
data_sub = c()
while(length(vec)>0){ #Keep running until no features are left
if(vec[1] %in% corr_df$measure1){ #Check if feature still no-grouped
tab = corr_df[corr_df$measure1 == vec[1],] #Take one feature against the others
tab = tab[tab$r>thres_corr,] #Select features corr above the threshold = 0.75
if(nrow(tab)!=0){ #If algorithm found features above corr
subgroup[[indice]] = c(vec[1], tab$measure2) #Save features as subgroup
idx = which(corr_df$measure1 %in% subgroup[[indice]])
if(length(idx)>0){corr_df = corr_df[-idx,]} #Remove features already subgroupped
idy = which(corr_df$measure2 %in% subgroup[[indice]])
if(length(idy)>0){corr_df = corr_df[-idy,]} #Remove features already subgroupped
#corr_df = corr_df[-which(corr_df$measure1 %in% subgroup[[indice]]),] #Remove features already subgroupped
vec = vec[-which(vec%in%subgroup[[indice]])] #Remove feature already subgroupped from vector
indice = indice + 1
}else{ #Condition when there is no correlation above the threshold (features no subgroupped)
corr_df = corr_df[-which(corr_df$measure1 == vec[1]),] #Remove variable from corr matrix to keep subgrouping the others
if(length(which(corr_df$measure2==vec[1]))>0){corr_df = corr_df[-which(corr_df$measure2 == vec[1]),]}
vec = vec[-1] #Remove variable from vector to keep analyzing the others
indice = indice #Not increase index cause no subgroup appeared
}
}else{ #If feature is not in corr matrix it means that there is no any significant correlation against it and other features
vec = vec[-1] #Remove variable from vector to keep analyzing the others
indice = indice  #Not increase index cause no subgroup appeared
}
}
if(length(subgroup)!=0){
#Name subgroups
for (i in 1:length(subgroup)){
names(subgroup)[i] = paste0(file_name, "_Subgroup_", i, "_Iteration_", iteration)
}
#Take average expression of subgroups
for(i in 1:length(subgroup)){ #Create data frame with features subgroupped
sub = data.frame(data[,colnames(data)%in%subgroup[[i]]]) #Map features that are inside each subgroup from input (deconvolution)
sub$average = rowMeans(sub) #Compute average of subgroup across patients
data_sub = data.frame(cbind(data_sub, sub$average)) #Save avg in a new data frame
colnames(data_sub)[i] = names(subgroup)[i]
name = colnames(data)[which(!(colnames(data)%in%subgroup[[i]]))]
data = data.frame(data[,-which(colnames(data)%in%subgroup[[i]])]) #Remove from deconvolution features that are subgrouped
if(ncol(data.frame(data))==1){
data = as.data.frame(data)
colnames(data)[1] = name
}
}
rownames(data_sub) = rownames(data) #List of patients
# new_average_values = colMeans(data.matrix(data_sub))
if(iteration == 1){ #Save what is inside the first subgroups
cell_subgroups = subgroup
data_sub = data.frame(data_sub[,colnames(data_sub)%in%names(cell_subgroups)])
colnames(data_sub) = names(cell_subgroups)
}
# #Compare averages and test if they are above certain threshold
# if(iteration == 1){
#   df = data
# }
#else{
#   for (i in 1:length(subgroup)) {
#     for (j in 1:length(idx)) {
#       change = max(abs(average_values[idx[j]] - new_average_values[i]))
#       if (change > thres_change) {
#         terminate <- TRUE
#       }
#     }
#   }
# }
# average_values = new_average_values
if(ncol(data)!=0){
data = cbind(data, data_sub)
}else{
data = data_sub
terminate = TRUE
}
iteration = iteration + 1
}else{
terminate = TRUE
#if(!is.null(tryCatch(eval(parse(text = df)), error = function(e) NULL))==F){
#df = data
#}
}
}
if(is.null(data_sub)==TRUE){
data = data
}else{
data = cbind(data, data_sub)
}
idx = which(duplicated(t(data)))
if(length(idx)>0){
names = colnames(data)[idx]
data = data.frame(data[,-idx])
if(ncol(data)==1){
colnames(data)[1] = names
}
}
}
#lis = remove_subgroups(cell
return(list(data, cell_subgroups, subgroup, lis))
}
}
res = list()
groups = list()
groups_similarity = list()
for (i in 1:length(cells)) {
x = compute_subgroups(cells[[i]], names(cells)[i])
res = c(res, x[1])
groups = c(groups, x[2])
groups_similarity = c(groups_similarity, x[4])
}
names_cells = c("B", "MACROPHAGES", "M0", "M1", "M2", "MONOCYTES", "NEUTROPHILS", "NK", "NK.ACTIVATED", "NK.RESTING", "NKT", "CD4", "CD4.ACTIVATED", "CD4.RESTING",
"CD8", "TREGS", "DENDRITIC", "DENDRITIC.ACTIVATED", "DENDRITIC.RESTING", "CANCER", "ENDOTHELIAL", "CAF")
names(res) = names_cells
names(groups) = names_cells
names(groups_similarity) = names_cells
#Res and Groups
ls = remove_subgroups(groups)
for (i in 1:length(groups)) {
idx = which(names(groups[[i]])%in%ls)
idy = which(names(res[[i]])%in%ls)
if(length(idx)>0){
groups[[i]] = groups[[i]][-idx]
res[[i]] = res[[i]][-idy]
}
}
#Output deconvolution
dt = c()
for (i in 1:length(res)) {
dt = c(dt, res[[i]])
}
dt = data.frame(dt)
rownames(dt) = rownames(deconv)
write.csv(dt, "Deconvolution_after_LATE_STAGE.csv")
TFs <- read.csv(paste0(getwd(),"/Output/TFs/VIPER/TFs_scores_all_LateStage.csv"), row.names = 1)
#Remove columns with low variance (no much change across samples)
TFs = data.frame(TFs[-which(rowVars(TFs)<=summary(rowVars(TFs))[2]),])
minAbsValue <- abs(min(TFs))
TFs = TFs + minAbsValue
hc <- as.dendrogram(hclust(dist(t(scale(t(TFs)))), method = "ward.D2"))
plot(hc)
rect.dendrogram(hc, h = 15,horiz=F)
plot(hc)
rect.dendrogram(hc, h = 15,horiz=F)
clusters <- cutree(hc, h = 15)
TFs_modules = TFs %>%
as_tibble() %>%
mutate("Cluster" = paste0("Cluster ", clusters)) %>%
group_by(Cluster) %>%
summarise(across(everything(), mean)) %>%
column_to_rownames("Cluster")
hc <- as.dendrogram(hclust(dist(t(scale(t(TFs_modules)))), method = "ward.D2"))
plot(hc)
plot(hc)
rect.dendrogram(hc, h = 6,horiz=F)
clusters2 <- cutree(hc, h = 6)
TFs_modules_merge = TFs_modules %>%
as_tibble() %>%
mutate("Cluster" = paste0("Cluster ", clusters2)) %>%
group_by(Cluster) %>%
summarise(across(everything(), mean)) %>%
column_to_rownames("Cluster")
write.csv(TFs_modules_merge, "TFs_modules_LATE_STAGE.csv")
nSamples = ncol(TFs_modules_merge)
TFs_modules_merge = TFs_modules_merge[,colnames(TFs_modules_merge)%in%rownames(clinical.data)]
moduleTraitCor = cor(t(TFs_modules_merge), dt, use = "p")
moduleTraitPvalue = corPvalueStudent(moduleTraitCor, nSamples)
textMatrix =  paste(signif(moduleTraitCor, 2), "\n(",
signif(moduleTraitPvalue, 1), ")", sep = "")
dim(textMatrix) = dim(moduleTraitCor)
idx = which(moduleTraitPvalue>0.05)
for (i in idx) {
textMatrix[i] = NA
}
d <- dist(t(moduleTraitCor), method = "euclidean")
hc1 <- hclust(d, method = "ward.D2" )
vec = hc1[["order"]]
hc = as.dendrogram(hc1)
png(paste0(getwd(),"/Figures/Heatmaps/New3/Dendogram_Subgroups_cells_LATESTAGE.png"), width = 2500, height = 2500, res=150)
par(mar = c(5, 5, 4, 30)) #bottom, left, top, right
plot(hc, horiz= T)
rect.dendrogram(hc, h=0.8,horiz=TRUE)
dev.off()
hc = as.dendrogram(hc1)
png(paste0(getwd(),"/Figures/Heatmaps/New3/Dendogram_Subgroups_cells_LATESTAGE.png"), width = 2500, height = 2500, res=150)
par(mar = c(5, 5, 4, 30)) #bottom, left, top, right
plot(hc, horiz= T)
rect.dendrogram(hc, h=0.5,horiz=TRUE)
dev.off()
clusters3 <- cutree(hc, h = 0.5)
png(paste0(getwd(),"/Figures/Heatmaps/New3/Deconvolution_LATESTAGE.png"), width = 6000, height = 4500, res=250)
Heatmap(t(scale(dt)), cluster_rows = hc, clustering_method_columns = "ward.D2",width = unit(30, "cm"), height = unit(35, "cm"), column_dend_height = unit(5, "cm"), show_heatmap_legend = F)
dev.off()
deconv_df = dt %>%
t() %>%
as_tibble() %>%
mutate("Cluster" = paste0("Cluster_", clusters3)) %>%
group_by(Cluster) %>%
summarise(across(everything(), mean)) %>%
column_to_rownames("Cluster")
png(paste0(getwd(),"/Figures/Heatmaps/New3/Deconvolution_LATESTAGE_NICHES.png"), width = 6000, height = 4500, res=250)
Heatmap(t(scale(t(deconv_df))), clustering_method_columns = "ward.D2",width = unit(30, "cm"), height = unit(35, "cm"), column_dend_height = unit(5, "cm"), show_heatmap_legend = F)
dev.off()
#Save cell clusters
data = dt %>%
t() %>%
as_tibble() %>%
mutate("Cluster" = clusters3) %>%
as.data.frame()
rownames(data) = colnames(dt)
niches = list()
for (i in 1:nrow(deconv_df)) {
niches[[i]] = rownames(data)[which(data$Cluster==i)]
}
saveRDS(niches, "Cell_groups_LATESTAGE.rds")
hc1 = as.dendrogram(hclust(dist(scale(t(deconv_df))), method = "ward.D2"))
plot(hc1)
clusters <- cutree(hc1, k=2)
clinical.data$cluster = NULL
clinical.data$cluster = clusters
random_forest <- function(data, target, k_features) {
# Step 1: Random Forest Feature Selection
target = as.factor(target)
# Step 2: Random Forest Classification
rf_classifier <- randomForest(target ~ ., data = data)
rf_importance <- importance(rf_classifier)
rf_importance <- rf_importance[order(rf_importance, decreasing = TRUE), ]
rf_selected_features <- data[, names(rf_importance[order(rf_importance, decreasing = TRUE)][1:k_features])]
rf_importance = data.frame(rf_importance)
colnames(rf_importance)[1] = "Importance"
return(list(rf_selected_features, rf_importance))
}
data = t(deconv_df)
res = random_forest(data.frame(data), clinical.data$cluster, 10)
png(paste0(getwd(),"/Figures/Heatmaps/New3/Clusters_Feature_Importance_LATESTAGE.png"), width = 2000, height = 1500, res=250)
ggplot(res[[2]], aes(x = reorder(rownames(res[[2]]), -Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Features", y = "Importance") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
png(paste0(getwd(),"/Figures/Heatmaps/New3/Deconvolution_LATESTAGE_TFs_CLUSTERS.png"), width = 6000, height = 4500, res=250)
ha <- HeatmapAnnotation(Cluster = clinical.data$cluster, col = list(Cluster = c("1" = "green", "2" = "purple")))
Heatmap(t(scale(res[[1]])),  clustering_method_columns = "ward.D2", top_annotation = ha, width = unit(30, "cm"), height = unit(20, "cm"), column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"))
dev.off()
response <- read.csv(paste0(getwd(),"/Input/ClinicalData/ClinicalData_Response.csv"), row.names = 1)
response = response[rownames(response)%in%rownames(clinical.data),]
clinical.data = clinical.data[rownames(clinical.data)%in%rownames(response),]
deconv_df = deconv_df[,colnames(deconv_df)%in%rownames(clinical.data)]
clinical.data$response = response$response
clinical.data = clinical.data[-which(clinical.data$response=="No data"),]
deconv_df = deconv_df[,colnames(deconv_df)%in%rownames(clinical.data)]
dat = res[[1]]
dat = dat[rownames(dat)%in%rownames(clinical.data),]
ha <- HeatmapAnnotation(Response = clinical.data$response, col = list(Response = c("Responders" = "green", "Non responders"= "red")))
png(paste0(getwd(),"/Figures/Heatmaps/New3/DeconvolutionLATESTAGE_RESPONSE_Clusters.png"), width = 6000, height = 4500, res=250)
Heatmap(t(scale(dat)), clustering_method_columns = "ward.D2", top_annotation = ha, width = unit(30, "cm"), height = unit(35, "cm"), column_dend_height = unit(5, "cm"), show_heatmap_legend = F)
dev.off()
View(niches)
niches[[6]]
niches[[11]]
niches[[14]]
niches[[4]]
dataset = "Immunopredict"
colData_IP <- read.csv(paste0(getwd(),"/Input/ClinicalData/ClinicalData_", dataset, ".csv"), row.names = 1)
dataset = "ImmunoPredict"
colData_IP <- read.csv(paste0(getwd(),"/Input/ClinicalData/ClinicalData_", dataset, ".csv"), row.names = 1)
deconv_df = dt %>%
t() %>%
as_tibble() %>%
mutate("Cluster" = paste0("Cluster_", clusters3)) %>%
group_by(Cluster) %>%
summarise(across(everything(), mean)) %>%
column_to_rownames("Cluster")
data = t(deconv_df)
IP = data[rownames(data)%in%rownames(colData_IP),]
colData_IP = colData_IP[rownames(colData_IP)%in%rownames(IP),]
hc1 = as.dendrogram(hclust(dist(scale(IP)), method = "ward.D2"))
plot(hc1)
plot(hc1)
rect.dendrogram(hc1, k=2,horiz=F)
View(IP)
clusters <- cutree(hc1, k=2)
colData_IP$cluster = NULL
colData_IP$cluster = clusters
res = random_forest(data.frame(IP), colData_IP$cluster, 10)
png(paste0(getwd(),"/Figures/Heatmaps/New3/IP_Feature_Importance_LATESTAGE.png"), width = 2000, height = 1500, res=250)
ggplot(res[[2]], aes(x = reorder(rownames(res[[2]]), -Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "blue") +
labs(x = "Features", y = "Importance") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
dev.off()
hclu = hclust(dist(t(scale(res[[1]]))), method = "ward.D2")
vec = hclu[["order"]]
View(colData_IP)
png(paste0(getwd(),"/Figures/Heatmaps/New3/Deconvolution_IP_LATESTAGE_FS_CLUSTERS.png"), width = 6000, height = 4500, res=250)
ha <- HeatmapAnnotation(Cluster = colData_IP$cluster, col = list(Cluster = c("1" = "green", "2" = "purple")))
Heatmap(t(scale(res[[1]][,vec])), cluster_rows = F,  clustering_method_columns = "ward.D2", top_annotation = ha, width = unit(30, "cm"), height = unit(20, "cm"), column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"))
dev.off()
#Add response
response <- read.csv(paste0(getwd(),"/Input/ClinicalData/ClinicalData_Response.csv"), row.names = 1)
View(response)
response = response[rownames(response)%in%rownames(colData_IP),]
colData_IP = colData_IP[rownames(colData_IP)%in%rownames(response),]
colData_IP$Response = response$response
dat = res[[1]]
dat = dat[rownames(dat)%in%rownames(colData_IP),]
ha <- HeatmapAnnotation(Response = colData_IP$response, Cluster = colData_IP$cluster, col = list(Cluster = c("1" = "green", "2" = "purple"),
Response = c("Responders" = "green", "Non responders"= "red")))
png(paste0(getwd(),"/Figures/Heatmaps/New3/Deconvolution_IP_LATESTAGE_FS_CLUSTERS_RESPONSE.png"), width = 6000, height = 4500, res=250)
Heatmap(t(scale(dat)), clustering_method_columns = "ward.D2", top_annotation = ha, width = unit(30, "cm"), height = unit(35, "cm"), column_dend_height = unit(5, "cm"), show_heatmap_legend = F)
dev.off()
ha <- HeatmapAnnotation(Response = colData_IP$Response, Cluster = colData_IP$cluster, col = list(Cluster = c("1" = "green", "2" = "purple"),
Response = c("Responders" = "green", "Non responders"= "red")))
png(paste0(getwd(),"/Figures/Heatmaps/New3/Deconvolution_IP_LATESTAGE_FS_CLUSTERS_RESPONSE.png"), width = 6000, height = 4500, res=250)
Heatmap(t(scale(dat)), clustering_method_columns = "ward.D2", top_annotation = ha, width = unit(30, "cm"), height = unit(35, "cm"), column_dend_height = unit(5, "cm"), show_heatmap_legend = F)
dev.off()
response2 <- read.csv(paste0(getwd(),"/Input/ClinicalData/ClinicalData_Response.csv"), row.names = 1)
View(response)
View(response2)
deconv_df = dt %>%
t() %>%
as_tibble() %>%
mutate("Cluster" = paste0("Cluster_", clusters3)) %>%
group_by(Cluster) %>%
summarise(across(everything(), mean)) %>%
column_to_rownames("Cluster")
random_forest_boostrapping = function(data, clinical, num_bootstraps){
# Create empty lists to store the bootstrap results
bootstrap_results <- list()
df_responders = clinical[which(clinical$response=="Responders"),]
df_Non_responders = clinical[which(clinical$response=="Non responders"),]
# Perform random bootstrapping
for (i in 1:num_bootstraps) {
# Create a bootstrap sample
bootstrap_data <- rbind(df_responders, df_Non_responders[sample(nrow(df_Non_responders), size = 7, replace = FALSE), ])
target = as.factor(bootstrap_data[,'response'])
# Perform random forest classification
rf_classifier <- randomForest(target ~ ., data = data[rownames(data)%in%rownames(bootstrap_data),])
rf_importance <- importance(rf_classifier)
rf_importance <- rf_importance[order(rf_importance, decreasing = TRUE), ]
rf_selected_features <- data[, names(rf_importance[order(rf_importance, decreasing = TRUE)][1:5])]
# Store the random forest model in the bootstrap_results list
bootstrap_results[[i]] <- rf_selected_features
x = c()
for (i in 1:length(bootstrap_results)) {
x = c(x, names(bootstrap_results[[i]]))
}
intersection = unique(x)
}
return(intersection)
}
num_bootstraps <- 10
View(deconv_df)
View(deconv_df)
View(deconv_df)
View(deconv1)
View(deconv)
clinical.data = rbind(clinical.data1, clinical.data2)
clinical.data = clinical.data[which(clinical.data$Stages_simplified=="IV"),] #38 SAMPLES
dataset = "ImmunoPredict"
colData_IP <- read.csv(paste0(getwd(),"/Input/ClinicalData/ClinicalData_", dataset, ".csv"), row.names = 1)
data = t(deconv_df)
IP = data[rownames(data)%in%rownames(colData_IP),]
colData_IP = colData_IP[rownames(colData_IP)%in%rownames(IP),]
hc1 = as.dendrogram(hclust(dist(scale(IP)), method = "ward.D2"))
plot(hc1)
clusters <- cutree(hc1, k=2)
colData_IP$cluster = NULL
colData_IP$cluster = clusters
colData_IP$cluster
res = random_forest(data.frame(IP), colData_IP$cluster, 10)
View(deconv_df)
View(clinical.data)
response <- read.csv(paste0(getwd(),"/Input/ClinicalData/ClinicalData_Response.csv"), row.names = 1)
response = response[rownames(response)%in%colnames(deconv_df),]
View(deconv_df)
View(response)
clinical.data = clinical.data[rownames(clinical.data)%in%rownames(response),]
dat = deconv_df[colnames(deconv_df)%in%rownames(clinical.data),]
clinical.data$response = response$response
table
table(clinical.data$response)
random_forest_boostrapping = function(data, clinical, num_bootstraps, k_features){
# Create empty lists to store the bootstrap results
bootstrap_results <- list()
df_responders = clinical[which(clinical$response=="Responders"),]
df_Non_responders = clinical[which(clinical$response=="Non responders"),]
# Perform random bootstrapping
for (i in 1:num_bootstraps) {
# Create a bootstrap sample
bootstrap_data <- rbind(df_responders, df_Non_responders[sample(nrow(df_Non_responders), size = 5, replace = FALSE), ])
target = as.factor(bootstrap_data[,'response'])
# Perform random forest classification
rf_classifier <- randomForest(target ~ ., data = data[rownames(data)%in%rownames(bootstrap_data),])
rf_importance <- importance(rf_classifier)
rf_importance <- rf_importance[order(rf_importance, decreasing = TRUE), ]
rf_selected_features <- data[, names(rf_importance[order(rf_importance, decreasing = TRUE)][1:k_features])]
# Store the random forest model in the bootstrap_results list
bootstrap_results[[i]] <- rf_selected_features
x = c()
for (i in 1:length(bootstrap_results)) {
x = c(x, names(bootstrap_results[[i]]))
}
intersection = unique(x)
}
return(intersection)
}
View(dat)
View(IP)
res = random_forest_boostrapping(data.frame(t(dat)), clinical.data, 10, 10)
View(dat)
rownames(clinical.data)
colnames(deconv_df)
View(dt)
res = list()
groups = list()
groups_similarity = list()
for (i in 1:length(cells)) {
x = compute_subgroups(cells[[i]], names(cells)[i])
res = c(res, x[1])
groups = c(groups, x[2])
groups_similarity = c(groups_similarity, x[4])
}
names_cells = c("B", "MACROPHAGES", "M0", "M1", "M2", "MONOCYTES", "NEUTROPHILS", "NK", "NK.ACTIVATED", "NK.RESTING", "NKT", "CD4", "CD4.ACTIVATED", "CD4.RESTING",
"CD8", "TREGS", "DENDRITIC", "DENDRITIC.ACTIVATED", "DENDRITIC.RESTING", "CANCER", "ENDOTHELIAL", "CAF")
names(res) = names_cells
names(groups) = names_cells
names(groups_similarity) = names_cells
#Res and Groups
ls = remove_subgroups(groups)
for (i in 1:length(groups)) {
idx = which(names(groups[[i]])%in%ls)
idy = which(names(res[[i]])%in%ls)
if(length(idx)>0){
groups[[i]] = groups[[i]][-idx]
res[[i]] = res[[i]][-idy]
}
}
#Output deconvolution
dt = c()
for (i in 1:length(res)) {
dt = c(dt, res[[i]])
}
dt = data.frame(dt)
rownames(dt) = rownames(deconv)
deconv_df = dt %>%
t() %>%
as_tibble() %>%
mutate("Cluster" = paste0("Cluster_", clusters3)) %>%
group_by(Cluster) %>%
summarise(across(everything(), mean)) %>%
column_to_rownames("Cluster")
colnames(deconv_df)
View(deconv_df)
dat = deconv_df[,colnames(deconv_df)%in%rownames(clinical.data)]
res = random_forest_boostrapping(data.frame(t(dat)), clinical.data, 10, 10)
clinical.data = clinical.data[-which(clinical.data$response=="No data"),]
View(dat)
dat = dat[,colnames(dat)%in%rownames(clinical.data)]
png(paste0(getwd(),"/Figures/Heatmaps/New3/CLUSTERS_FS_RESPONSE_LATESTAGE.png"), width = 6000, height = 4500, res=250)
ha <- HeatmapAnnotation(Response = clinical.data$Response, col = list(Response = c("Responders" = "green", "Non responders"= "red")))
png(paste0(getwd(),"/Figures/Heatmaps/New3/CLUSTERS_FS_RESPONSE_LATESTAGE.png"), width = 6000, height = 4500, res=250)
ha <- HeatmapAnnotation(Response = clinical.data$response, col = list(Response = c("Responders" = "green", "Non responders"= "red")))
Heatmap(t(scale(res[[1]])),  clustering_method_columns = "ward.D2", top_annotation = ha, width = unit(30, "cm"), height = unit(20, "cm"), column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"))
tab = res[[1]]
res
View(dat)
res = random_forest_boostrapping(data.frame(t(dat)), clinical.data, 10, 5)
View(dat)
data_response = dat[rownames(dat)%in%res,]
View(dat)
View(deconv)
View(data_response)
png(paste0(getwd(),"/Figures/Heatmaps/New3/CLUSTERS_FS_RESPONSE_LATESTAGE.png"), width = 6000, height = 4500, res=250)
ha <- HeatmapAnnotation(Response = clinical.data$response, col = list(Response = c("Responders" = "green", "Non responders"= "red")))
Heatmap(t(scale(t(data_response))),  clustering_method_columns = "ward.D2", top_annotation = ha, width = unit(30, "cm"), height = unit(20, "cm"), column_dend_height = unit(10, "cm"), row_dend_width = unit(10, "cm"))
dev.off()
View(clinical.data)
View(data_response)
compute_violin = function(data, feature, file_name){
matrix = data
feature = as.factor(feature)
#matrix = data.frame(data[1:nrow(data)-1,])
matrix$measure = feature
#pval = data[nrow(data),]
for (i in (1:(ncol(matrix)-1))) {
violin = ggplot(matrix, aes(x=factor(measure), y=matrix[,i], fill=measure)) +
geom_violin(width=0.6) +
geom_boxplot(width=0.07, color="black", alpha=0.2) +
scale_fill_brewer() +
geom_smooth(aes(x=as.factor(measure), y=matrix[,i]), method = "loess") +
ylab(colnames(matrix[i])) +
xlab(file_name) +
#labs(title=colnames(matrix[i]),
#subtitle=paste0("ANOVA_RFE_RANDOM.FOREST test\npvalue: ", pval[i])) +
theme(axis.text.x = element_text(angle = 0),
axis.title.y = element_text(size = 8, angle = 90))
ggsave(violin, file=paste0(getwd(),"/Figures/Violin_plots/", colnames(matrix[i]), "_", file_name, ".png"))
}
}
compute_violin(data.frame(t(data_response)), clinical.data$response, "response")
niches[[12]]
niches[[14]]
niches[[15]]
niches[[5]]
table(clinical.data$response)
View(response2)
table(response2$response)
rownames(clinical.data)[which(clinical.data$response=="Responders")]
rownames(response2)[which(response2$response=="Responders")]
