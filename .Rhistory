clinical.data = read.csv("~/LungPredict1/Input/ClinicalData/ClinicalLPVan.csv", row.names=1)
clinical.data = clinical.data[-which(clinical.data$Batch==6),]
deconv = deconv[rownames(deconv)%in%rownames(clinical.data),]
idx = c("Epidish_CCLE_TIL10_NK.cells","CBSX__CCLE.TIL10__NK.cells", "Epidish_TIL10_NK.cells")
idy = c("DeconRNASeq_Fig2ab.NSCLC_PBMCs_scRNAseq_sigmatrix_NK.cells","DeconRNASeq_scRNA.Seq_melanoma_Tirosh_sigmatrix_SuppFig_3.b_NK.cells")
NK_sub1 = deconv[,which(colnames(deconv)%in%idx)]
NK_sub2 = deconv[,which(colnames(deconv)%in%idy)]
pt_ID1 = c()
pt_ID2 = c()
for (i in 1:ncol(NK_sub1)) {
patients = rownames(NK_sub1)[which(NK_sub1[,i]>summary(NK_sub1[,i])[5])]
pt_ID1 = c(pt_ID1, patients)
}
pt_ID1 = unique(pt_ID1)
pt_ID2 = c()
for (i in 1:ncol(NK_sub2)) {
patients = rownames(NK_sub2)[which(NK_sub2[,i]>summary(NK_sub2[,i])[5])]
pt_ID2 = c(pt_ID2, patients)
}
pt_ID2 = unique(pt_ID2)
x = c()
for (i in 1:length(pt_ID1)) {
if((pt_ID1[i]%in%pt_ID2)==T){
x = c(x, pt_ID[i])
}
}
pt_ID1 = pt_ID1[-which(pt_ID1%in%x)]
pt_ID2 = pt_ID2[-which(pt_ID2%in%x)]
clinical.data$NK = "na"
clinical.data$NK[rownames(clinical.data)%in%pt_ID1] = "NK_cluster_1"
clinical.data$NK[rownames(clinical.data)%in%pt_ID2] = "NK_cluster_2"
table(clinical.data$NK)
table(clinical.data$NK)
View(clinical.data)
clinical.data$NK = "na"
rownames(clinical.data)%in%pt_ID1
deconv <- as.matrix(read.delim("~/LungPredict1/Input/Deconvolution/all_deconvolutions_Counts_LPVan_TPM.txt", row.names=1))
clinical.data = read.csv("~/LungPredict1/Input/ClinicalData/ClinicalLPVan.csv", row.names=1)
clinical.data = clinical.data[-which(clinical.data$Batch==6),]
deconv = deconv[rownames(deconv)%in%rownames(clinical.data),]
idx = c("Epidish_CCLE_TIL10_NK.cells","CBSX__CCLE.TIL10__NK.cells", "Epidish_TIL10_NK.cells")
idy = c("DeconRNASeq_Fig2ab.NSCLC_PBMCs_scRNAseq_sigmatrix_NK.cells","DeconRNASeq_scRNA.Seq_melanoma_Tirosh_sigmatrix_SuppFig_3.b_NK.cells")
NK_sub1 = deconv[,which(colnames(deconv)%in%idx)]
NK_sub2 = deconv[,which(colnames(deconv)%in%idy)]
pt_ID1 = c()
pt_ID2 = c()
data = NK_sub1
for (i in 1:ncol(data)) {
patients = rownames(data)[which(data[,i]>summary(data[,i])[5])]
pt_ID1 = c(pt_ID1, patients)
}
pt_ID1 = unique(pt_ID1)
pt_ID2 = c()
data = NK_sub2
for (i in 1:ncol(data)) {
patients = rownames(data)[which(data[,i]>summary(data[,i])[5])]
pt_ID2 = c(pt_ID2, patients)
}
pt_ID2 = unique(pt_ID2)
x = c()
x = c()
for (i in 1:length(pt_ID1)) {
if((pt_ID1[i]%in%pt_ID2)==T){
x = c(x, pt_ID1[i])
}
}
pt_ID1 = pt_ID1[-which(pt_ID1%in%x)]
pt_ID2 = pt_ID2[-which(pt_ID2%in%x)]
clinical.data$NK = "na"
clinical.data$NK[rownames(clinical.data)%in%pt_ID1] = "NK_cluster_1"
clinical.data$NK[rownames(clinical.data)%in%pt_ID2] = "NK_cluster_2"
table(clinical.data$NK)
Counts <- read.csv("~/LungPredict1/Output/Counts_normalized_LPVan.csv", row.names=1)
Counts = Counts[,colnames(Counts)%in%rownames(clinical.data)]
compute_msVIPER_scores = function(RNA.counts.normalized, test_name, ref_name, measure, file_name){
dorothea2viper_regulons <- function(df) {
regulon_list <- split(df, df$tf)
viper_regulons <- lapply(regulon_list, function(regulon) {
tfmode <- stats::setNames(regulon$mor, regulon$target)
list(tfmode = tfmode, likelihood = rep(1, length(tfmode)))
})
return(viper_regulons)
}
data("dorothea_hs", package = "dorothea")
regulons <- dorothea_hs %>%
filter(confidence %in% c("A", "B", "C", "D"))
regu <- dorothea2viper_regulons(regulons)
RNA.counts.normalized = as.data.frame(RNA.counts.normalized)
vpres<- viper(RNA.counts.normalized, regu, verbose = FALSE, minsize = 4)
# Generating test and ref data
test_i <- which(measure == test_name)
ref_i <- which(measure == ref_name)
mat_test <- as.matrix(RNA.counts.normalized[,test_i])
mat_ref <- as.matrix(RNA.counts.normalized[,ref_i])
# Generating NULL model (test, reference)
dnull <- ttestNull(mat_test, mat_ref, per=1000)
# Generating signature
signature <- rowTtest(mat_test, mat_ref)
signature <- (qnorm(signature$p.value/2, lower.tail = FALSE) * sign(signature$statistic))
signature <- na.omit(signature)
signature <- signature[,1]
# Running msVIPER
mra <- msviper(signature, regu, dnull, verbose = FALSE)
# # Extract Differential Active TFs
# TFs = data.frame(mra[["es"]][["p.value"]])
# colnames(TFs) = "pval"
# vec = TFs$pval < 0.05
# TFs_msViper_adj = TFs[vec,]
# TFs_msViper_adj = as.data.frame(TFs_msViper_adj)
# rownames(TFs_msViper_adj) = rownames(TFs)[vec]
# TFs_msviper = vpres[rownames(vpres)%in%rownames(TFs_msViper_adj),]
#
# write.csv(TFs_msviper,paste0(getwd(),"/Output/TFs/msVIPER/TFs_scores_DifferentialActive_", file_name, ".csv"))
# Plot DiffActive TFs
png(paste0(getwd(),"/Figures/Heatmaps/msVIPER/NKs_",file_name, ".png"), width = 1000, height = 800, res=100)
print(plot(mra, mrs=15, cex=1, include = c("expression","activity")))
dev.off()
}
compute_msVIPER_scores(Counts, "NK_cluster_1", "NK_cluster_2", clinical.data$NK, "EARLYSTAGE")
deconv1 <- as.matrix(read.csv(paste0(getwd(),"/Input/Deconvolution/Deconvolution_LungPredict.csv"), row.names = 1))
clinical.data1 <- read.csv(paste0(getwd(),"/Input/ClinicalData/ClinicalData_LungPredict.csv"), row.names = 1)
deconv2 <- as.matrix(read.csv(paste0(getwd(),"/Input/Deconvolution/Deconvolution_ImmunoPredict.csv"), row.names = 1))
clinical.data2 <- read.csv(paste0(getwd(),"/Input/ClinicalData/ClinicalData_ImmunoPredict.csv"), row.names = 1)
clinical.data1$EGFR_mut = NULL
clinical.data1$STK11_mut = NULL
clinical.data1$Metastatic = NULL
clinical.data = rbind(clinical.data1, clinical.data2)
clinical.data = clinical.data[which(clinical.data$Stages_simplified=="IV"),] #38 SAMPLES
deconv = rbind(deconv1, deconv2)
deconv = deconv[rownames(deconv)%in%rownames(clinical.data),]
response <- read.csv(paste0(getwd(),"/Input/ClinicalData/ClinicalData_Response.csv"), row.names = 1)
response = response[rownames(response)%in%rownames(clinical.data),]
clinical.data = clinical.data[rownames(clinical.data)%in%rownames(response),]
clinical.data$response = response$response
clinical.data = clinical.data[-which(clinical.data$response=="No data"),]
deconv = deconv[rownames(deconv)%in%rownames(clinical.data),]
idx = c("Quantiseq_NK_cell","DeconRNASeq_BPRNACanProMet_NK", "CBSX__LM22__NK_cells_resting")
idy = c("DeconRNASeq_scRNA.Seq_melanoma_Tirosh_sigmatrix_SuppFig_3.b_NK.cells", "CBSX__LM22__NK_cells_activated")
NK_sub1 = deconv[,which(colnames(deconv)%in%idx)]
NK_sub2 = deconv[,which(colnames(deconv)%in%idy)]
pt_ID = c()
data = NK_sub1
for (i in 1:ncol(data)) {
patients = rownames(data)[which(data[,i]>summary(data[,i])[5])]
pt_ID = c(pt_ID, patients)
}
pt_ID1 = unique(pt_ID)
data = NK_sub2
pt_ID = c()
for (i in 1:ncol(data)) {
patients = rownames(data)[which(data[,i]>summary(data[,i])[5])]
pt_ID = c(pt_ID, patients)
}
pt_ID2 = unique(pt_ID)
x = c()
for (i in 1:length(pt_ID1)) {
if((pt_ID1[i]%in%pt_ID2)==T){
x = c(x, pt_ID1[i])
}
}
pt_ID1 = pt_ID1[-which(pt_ID1%in%x)]
pt_ID2 = pt_ID2[-which(pt_ID2%in%x)]
clinical.data$NK = "na"
clinical.data$NK[rownames(clinical.data)%in%pt_ID1] = "NK_cluster_1"
clinical.data$NK[rownames(clinical.data)%in%pt_ID2] = "NK_cluster_2"
table(clinical.data$NK)
Counts <- read.csv("~/LungPredict1/Output/Counts_normalized_Response.csv", row.names=1)
Counts = Counts[,colnames(Counts)%in%rownames(clinical.data)]
m2 <- do.call(rbind, strsplit(rownames(Counts), split="_", fixed = TRUE))
Counts = as.matrix(Counts)
rownames(Counts) = m2[,2]
compute_msVIPER_scores = function(RNA.counts.normalized, test_name, ref_name, measure, file_name){
dorothea2viper_regulons <- function(df) {
regulon_list <- split(df, df$tf)
viper_regulons <- lapply(regulon_list, function(regulon) {
tfmode <- stats::setNames(regulon$mor, regulon$target)
list(tfmode = tfmode, likelihood = rep(1, length(tfmode)))
})
return(viper_regulons)
}
data("dorothea_hs", package = "dorothea")
regulons <- dorothea_hs %>%
filter(confidence %in% c("A", "B", "C", "D"))
regu <- dorothea2viper_regulons(regulons)
RNA.counts.normalized = as.data.frame(RNA.counts.normalized)
vpres<- viper(RNA.counts.normalized, regu, verbose = FALSE, minsize = 4)
# Generating test and ref data
test_i <- which(measure == test_name)
ref_i <- which(measure == ref_name)
mat_test <- as.matrix(RNA.counts.normalized[,test_i])
mat_ref <- as.matrix(RNA.counts.normalized[,ref_i])
# Generating NULL model (test, reference)
dnull <- ttestNull(mat_test, mat_ref, per=1000)
# Generating signature
signature <- rowTtest(mat_test, mat_ref)
signature <- (qnorm(signature$p.value/2, lower.tail = FALSE) * sign(signature$statistic))
signature <- na.omit(signature)
signature <- signature[,1]
# Running msVIPER
mra <- msviper(signature, regu, dnull, verbose = FALSE)
# # Extract Differential Active TFs
# TFs = data.frame(mra[["es"]][["p.value"]])
# colnames(TFs) = "pval"
# vec = TFs$pval < 0.05
# TFs_msViper_adj = TFs[vec,]
# TFs_msViper_adj = as.data.frame(TFs_msViper_adj)
# rownames(TFs_msViper_adj) = rownames(TFs)[vec]
# TFs_msviper = vpres[rownames(vpres)%in%rownames(TFs_msViper_adj),]
#
# write.csv(TFs_msviper,paste0(getwd(),"/Output/TFs/msVIPER/TFs_scores_DifferentialActive_", file_name, ".csv"))
# Plot DiffActive TFs
png(paste0(getwd(),"/Figures/Heatmaps/msVIPER/NKs_",file_name, ".png"), width = 1000, height = 800, res=100)
print(plot(mra, mrs=15, cex=1, include = c("expression","activity")))
dev.off()
}
compute_msVIPER_scores(Counts, "NK_cluster_1", "NK_cluster_2", clinical.data$NK, "LateStage")
deconv <- as.matrix(read.delim("~/LungPredict1/Input/Deconvolution/all_deconvolutions_Counts_LPVan_TPM.txt", row.names=1))
clinical.data = read.csv("~/LungPredict1/Input/ClinicalData/ClinicalLPVan.csv", row.names=1)
clinical.data = clinical.data[-which(clinical.data$Batch==6),]
deconv = deconv[rownames(deconv)%in%rownames(clinical.data),]
idx = c("DeconRNASeq_Fig2ab.NSCLC_PBMCs_scRNAseq_sigmatrix_NK.cells","DeconRNASeq_scRNA.Seq_melanoma_Tirosh_sigmatrix_SuppFig_3.b_NK.cells")
idy = c("Epidish_CCLE_TIL10_NK.cells","CBSX__CCLE.TIL10__NK.cells", "Epidish_TIL10_NK.cells")
NK_sub1 = deconv[,which(colnames(deconv)%in%idx)]
NK_sub2 = deconv[,which(colnames(deconv)%in%idy)]
pt_ID = c()
data = NK_sub1
for (i in 1:ncol(data)) {
patients = rownames(data)[which(data[,i]>summary(data[,i])[5])]
pt_ID = c(pt_ID, patients)
}
pt_ID1 = unique(pt_ID)
pt_ID = c()
data = NK_sub2
for (i in 1:ncol(data)) {
patients = rownames(data)[which(data[,i]>summary(data[,i])[5])]
pt_ID = c(pt_ID, patients)
}
pt_ID2 = unique(pt_ID)
x = c()
for (i in 1:length(pt_ID1)) {
if((pt_ID1[i]%in%pt_ID2)==T){
x = c(x, pt_ID1[i])
}
}
pt_ID1 = pt_ID1[-which(pt_ID1%in%x)]
pt_ID2 = pt_ID2[-which(pt_ID2%in%x)]
clinical.data$NK = "na"
clinical.data$NK[rownames(clinical.data)%in%pt_ID1] = "NK_cluster_1"
clinical.data$NK[rownames(clinical.data)%in%pt_ID2] = "NK_cluster_2"
table(clinical.data$NK)
Counts <- read.csv("~/LungPredict1/Output/Counts_normalized_LPVan.csv", row.names=1)
Counts = Counts[,colnames(Counts)%in%rownames(clinical.data)]
compute_msVIPER_scores = function(RNA.counts.normalized, test_name, ref_name, measure, file_name){
dorothea2viper_regulons <- function(df) {
regulon_list <- split(df, df$tf)
viper_regulons <- lapply(regulon_list, function(regulon) {
tfmode <- stats::setNames(regulon$mor, regulon$target)
list(tfmode = tfmode, likelihood = rep(1, length(tfmode)))
})
return(viper_regulons)
}
data("dorothea_hs", package = "dorothea")
regulons <- dorothea_hs %>%
filter(confidence %in% c("A", "B", "C", "D"))
regu <- dorothea2viper_regulons(regulons)
RNA.counts.normalized = as.data.frame(RNA.counts.normalized)
vpres<- viper(RNA.counts.normalized, regu, verbose = FALSE, minsize = 4)
# Generating test and ref data
test_i <- which(measure == test_name)
ref_i <- which(measure == ref_name)
mat_test <- as.matrix(RNA.counts.normalized[,test_i])
mat_ref <- as.matrix(RNA.counts.normalized[,ref_i])
# Generating NULL model (test, reference)
dnull <- ttestNull(mat_test, mat_ref, per=1000)
# Generating signature
signature <- rowTtest(mat_test, mat_ref)
signature <- (qnorm(signature$p.value/2, lower.tail = FALSE) * sign(signature$statistic))
signature <- na.omit(signature)
signature <- signature[,1]
# Running msVIPER
mra <- msviper(signature, regu, dnull, verbose = FALSE)
# # Extract Differential Active TFs
# TFs = data.frame(mra[["es"]][["p.value"]])
# colnames(TFs) = "pval"
# vec = TFs$pval < 0.05
# TFs_msViper_adj = TFs[vec,]
# TFs_msViper_adj = as.data.frame(TFs_msViper_adj)
# rownames(TFs_msViper_adj) = rownames(TFs)[vec]
# TFs_msviper = vpres[rownames(vpres)%in%rownames(TFs_msViper_adj),]
#
# write.csv(TFs_msviper,paste0(getwd(),"/Output/TFs/msVIPER/TFs_scores_DifferentialActive_", file_name, ".csv"))
# Plot DiffActive TFs
png(paste0(getwd(),"/Figures/Heatmaps/msVIPER/NKs_",file_name, ".png"), width = 1000, height = 800, res=100)
print(plot(mra, mrs=15, cex=1, include = c("expression","activity")))
dev.off()
}
compute_msVIPER_scores(Counts, "NK_cluster_1", "NK_cluster_2", clinical.data$NK, "EARLYSTAGE")
idx = c("Epidish_CCLE_TIL10_NK.cells","CBSX__CCLE.TIL10__NK.cells", "Epidish_TIL10_NK.cells")
idy = c("DeconRNASeq_Fig2ab.NSCLC_PBMCs_scRNAseq_sigmatrix_NK.cells","DeconRNASeq_scRNA.Seq_melanoma_Tirosh_sigmatrix_SuppFig_3.b_NK.cells")
NK_sub1 = deconv[,which(colnames(deconv)%in%idx)]
NK_sub2 = deconv[,which(colnames(deconv)%in%idy)]
pt_ID = c()
data = NK_sub1
for (i in 1:ncol(data)) {
patients = rownames(data)[which(data[,i]>summary(data[,i])[5])]
pt_ID = c(pt_ID, patients)
}
pt_ID1 = unique(pt_ID)
deconv <- as.matrix(read.delim("~/LungPredict1/Input/Deconvolution/all_deconvolutions_Counts_LPVan_TPM.txt", row.names=1))
clinical.data = read.csv("~/LungPredict1/Input/ClinicalData/ClinicalLPVan.csv", row.names=1)
clinical.data = clinical.data[-which(clinical.data$Batch==6),]
deconv = deconv[rownames(deconv)%in%rownames(clinical.data),]
idx = c("Epidish_CCLE_TIL10_NK.cells","CBSX__CCLE.TIL10__NK.cells", "Epidish_TIL10_NK.cells")
idy = c("DeconRNASeq_Fig2ab.NSCLC_PBMCs_scRNAseq_sigmatrix_NK.cells","DeconRNASeq_scRNA.Seq_melanoma_Tirosh_sigmatrix_SuppFig_3.b_NK.cells")
NK_sub1 = deconv[,which(colnames(deconv)%in%idx)]
NK_sub2 = deconv[,which(colnames(deconv)%in%idy)]
pt_ID = c()
data = NK_sub1
for (i in 1:ncol(data)) {
patients = rownames(data)[which(data[,i]>summary(data[,i])[5])]
pt_ID = c(pt_ID, patients)
}
pt_ID1 = unique(pt_ID)
pt_ID = c()
data = NK_sub2
for (i in 1:ncol(data)) {
patients = rownames(data)[which(data[,i]>summary(data[,i])[5])]
pt_ID = c(pt_ID, patients)
}
pt_ID2 = unique(pt_ID)
x = c()
for (i in 1:length(pt_ID1)) {
if((pt_ID1[i]%in%pt_ID2)==T){
x = c(x, pt_ID1[i])
}
}
pt_ID1 = pt_ID1[-which(pt_ID1%in%x)]
pt_ID2 = pt_ID2[-which(pt_ID2%in%x)]
clinical.data$NK = "na"
clinical.data$NK[rownames(clinical.data)%in%pt_ID1] = "NK_cluster_1"
clinical.data$NK[rownames(clinical.data)%in%pt_ID2] = "NK_cluster_2"
table(clinical.data$NK)
Counts <- read.csv("~/LungPredict1/Output/Counts_normalized_LPVan.csv", row.names=1)
Counts = Counts[,colnames(Counts)%in%rownames(clinical.data)]
compute_msVIPER_scores = function(RNA.counts.normalized, test_name, ref_name, measure, file_name){
dorothea2viper_regulons <- function(df) {
regulon_list <- split(df, df$tf)
viper_regulons <- lapply(regulon_list, function(regulon) {
tfmode <- stats::setNames(regulon$mor, regulon$target)
list(tfmode = tfmode, likelihood = rep(1, length(tfmode)))
})
return(viper_regulons)
}
data("dorothea_hs", package = "dorothea")
regulons <- dorothea_hs %>%
filter(confidence %in% c("A", "B", "C", "D"))
regu <- dorothea2viper_regulons(regulons)
RNA.counts.normalized = as.data.frame(RNA.counts.normalized)
vpres<- viper(RNA.counts.normalized, regu, verbose = FALSE, minsize = 4)
# Generating test and ref data
test_i <- which(measure == test_name)
ref_i <- which(measure == ref_name)
mat_test <- as.matrix(RNA.counts.normalized[,test_i])
mat_ref <- as.matrix(RNA.counts.normalized[,ref_i])
# Generating NULL model (test, reference)
dnull <- ttestNull(mat_test, mat_ref, per=1000)
# Generating signature
signature <- rowTtest(mat_test, mat_ref)
signature <- (qnorm(signature$p.value/2, lower.tail = FALSE) * sign(signature$statistic))
signature <- na.omit(signature)
signature <- signature[,1]
# Running msVIPER
mra <- msviper(signature, regu, dnull, verbose = FALSE)
# # Extract Differential Active TFs
# TFs = data.frame(mra[["es"]][["p.value"]])
# colnames(TFs) = "pval"
# vec = TFs$pval < 0.05
# TFs_msViper_adj = TFs[vec,]
# TFs_msViper_adj = as.data.frame(TFs_msViper_adj)
# rownames(TFs_msViper_adj) = rownames(TFs)[vec]
# TFs_msviper = vpres[rownames(vpres)%in%rownames(TFs_msViper_adj),]
#
# write.csv(TFs_msviper,paste0(getwd(),"/Output/TFs/msVIPER/TFs_scores_DifferentialActive_", file_name, ".csv"))
# Plot DiffActive TFs
png(paste0(getwd(),"/Figures/Heatmaps/msVIPER/NKs_",file_name, ".png"), width = 1000, height = 800, res=100)
print(plot(mra, mrs=15, cex=1, include = c("expression","activity")))
dev.off()
}
compute_msVIPER_scores(Counts, "NK_cluster_1", "NK_cluster_2", clinical.data$NK, "EARLYSTAGE")
deconv <- as.matrix(read.delim("~/LungPredict1/Input/Deconvolution/all_deconvolutions_Counts_LPVan_TPM.txt", row.names=1))
clinical.data = read.csv("~/LungPredict1/Input/ClinicalData/ClinicalLPVan.csv", row.names=1)
clinical.data = clinical.data[-which(clinical.data$Batch==6),]
deconv = deconv[rownames(deconv)%in%rownames(clinical.data),]
idx = c("Epidish_CCLE_TIL10_NK.cells","CBSX__CCLE.TIL10__NK.cells", "Epidish_TIL10_NK.cells", "CBSX__TIL10__NK.cells")
idy = c("DeconRNASeq_Fig2ab.NSCLC_PBMCs_scRNAseq_sigmatrix_NK.cells","DeconRNASeq_scRNA.Seq_melanoma_Tirosh_sigmatrix_SuppFig_3.b_NK.cells")
NK_sub1 = deconv[,which(colnames(deconv)%in%idx)]
NK_sub2 = deconv[,which(colnames(deconv)%in%idy)]
pt_ID = c()
data = NK_sub1
for (i in 1:ncol(data)) {
patients = rownames(data)[which(data[,i]>summary(data[,i])[5])]
pt_ID = c(pt_ID, patients)
}
pt_ID1 = unique(pt_ID)
data = NK_sub2
pt_ID = c()
for (i in 1:ncol(data)) {
patients = rownames(data)[which(data[,i]>summary(data[,i])[5])]
pt_ID = c(pt_ID, patients)
}
pt_ID2 = unique(pt_ID)
x = c()
for (i in 1:length(pt_ID1)) {
if((pt_ID1[i]%in%pt_ID2)==T){
x = c(x, pt_ID1[i])
}
}
pt_ID1 = pt_ID1[-which(pt_ID1%in%x)]
pt_ID2 = pt_ID2[-which(pt_ID2%in%x)]
clinical.data$NK = "na"
clinical.data$NK[rownames(clinical.data)%in%pt_ID1] = "NK_cluster_1"
clinical.data$NK[rownames(clinical.data)%in%pt_ID2] = "NK_cluster_2"
table(clinical.data$NK)
Counts <- read.csv("~/LungPredict1/Output/Counts_normalized_LPVan.csv", row.names=1)
Counts = Counts[,colnames(Counts)%in%rownames(clinical.data)]
compute_msVIPER_scores = function(RNA.counts.normalized, test_name, ref_name, measure, file_name){
dorothea2viper_regulons <- function(df) {
regulon_list <- split(df, df$tf)
viper_regulons <- lapply(regulon_list, function(regulon) {
tfmode <- stats::setNames(regulon$mor, regulon$target)
list(tfmode = tfmode, likelihood = rep(1, length(tfmode)))
})
return(viper_regulons)
}
data("dorothea_hs", package = "dorothea")
regulons <- dorothea_hs %>%
filter(confidence %in% c("A", "B", "C", "D"))
regu <- dorothea2viper_regulons(regulons)
RNA.counts.normalized = as.data.frame(RNA.counts.normalized)
vpres<- viper(RNA.counts.normalized, regu, verbose = FALSE, minsize = 4)
# Generating test and ref data
test_i <- which(measure == test_name)
ref_i <- which(measure == ref_name)
mat_test <- as.matrix(RNA.counts.normalized[,test_i])
mat_ref <- as.matrix(RNA.counts.normalized[,ref_i])
# Generating NULL model (test, reference)
dnull <- ttestNull(mat_test, mat_ref, per=1000)
# Generating signature
signature <- rowTtest(mat_test, mat_ref)
signature <- (qnorm(signature$p.value/2, lower.tail = FALSE) * sign(signature$statistic))
signature <- na.omit(signature)
signature <- signature[,1]
# Running msVIPER
mra <- msviper(signature, regu, dnull, verbose = FALSE)
# # Extract Differential Active TFs
# TFs = data.frame(mra[["es"]][["p.value"]])
# colnames(TFs) = "pval"
# vec = TFs$pval < 0.05
# TFs_msViper_adj = TFs[vec,]
# TFs_msViper_adj = as.data.frame(TFs_msViper_adj)
# rownames(TFs_msViper_adj) = rownames(TFs)[vec]
# TFs_msviper = vpres[rownames(vpres)%in%rownames(TFs_msViper_adj),]
#
# write.csv(TFs_msviper,paste0(getwd(),"/Output/TFs/msVIPER/TFs_scores_DifferentialActive_", file_name, ".csv"))
# Plot DiffActive TFs
png(paste0(getwd(),"/Figures/Heatmaps/msVIPER/NKs_",file_name, ".png"), width = 1000, height = 800, res=100)
print(plot(mra, mrs=15, cex=1, include = c("expression","activity")))
dev.off()
}
compute_msVIPER_scores(Counts, "NK_cluster_1", "NK_cluster_2", clinical.data$NK, "EARLYSTAGE")
library(Seurat)
library(SeuratDisk)
library(tidyr)
library(dplyr)
library(org.Hs.eg.db)
library(ggplot2)
library(patchwork)
Convert("all_samples.h5ad", dest = "h5seurat", overwrite = T)
seurat_anndata = LoadH5Seurat("NK_cells.h5seurat",  assays = "RNA")
Convert("all_samples.h5ad", dest = "h5seurat", overwrite = T)
seurat_anndata = LoadH5Seurat("all_samples.h5seurat",  assays = "RNA")
View(seurat_anndata)
seurat_anndata@meta.data[["scorect"]]
# Dimensionality reduction
pbmc <- NormalizeData(seurat_anndata, normalization.method = "LogNormalize", scale.factor = 10000)
cll.combined = seurat_anndata
cll.combined <- RunPCA(cll.combined, features = VariableFeatures(object = cll.combined), verbose = FALSE)
# Grouped UMAP
DimPlot(cll.combined, reduction = "umap")
DimPlot(pbmc, reduction = "umap", label = TRUE, pt.size = 0.5) + NoLegend()
levels(pbmc)
seurat_anndata@meta.data[["annotated_ct_higher"]]
# Grouped UMAP
DimPlot(cll.combined, reduction = "umap",  label = T)
seurat_anndata@meta.data
cll.combined <- RunPCA(seurat_anndata, features = VariableFeatures(object = seurat_anndata), verbose = FALSE)
pbmc <- NormalizeData(seurat_anndata, normalization.method = "LogNormalize", scale.factor = 10000)
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc), verbose = FALSE)
DimPlot(seurat_anndata, reduction = "umap",  label = T)
levels(seurat_anndata)
seurat_anndata@meta.data[["annotated_ct"]]
levels(seurat_anndata@meta.data[["annotated_ct"]])
cluster.ids = c("B cells","CD4+ T cells" , "CD8+ T cells","Endothelial cells","Epithelial/Cancer","Fibroblasts","Mast cells","Mural cells","Myeloid cells","NK cells",            "Plasma B cells","T cells proliferative","T helper cells","T reg. cells")
names(cluster.ids)= levels(seurat_anndata)
seurat_anndata = RenameIdents(pbmc, cluster.ids)
DimPlot(seurat_anndata, reduction = "umap",  label = T)
levels(seurat_anndata)
names(cluster.ids)
seurat_anndata@meta.data[["cluster"]]
seurat_anndata@reductions[["umap"]]
