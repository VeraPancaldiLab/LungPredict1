Dendritic = data[,grep("endritic", colnames(data))]
Dendritic.activated = grep("activated", colnames(Dendritic))
Dendritic.activated = Dendritic[, Dendritic.activated, drop = FALSE]
Dendritic.resting = grep("resting", colnames(Dendritic))
Dendritic.resting = Dendritic[, Dendritic.resting, drop = FALSE]
Dendritic = Dendritic[,-which(colnames(Dendritic)%in%c(colnames(Dendritic.activated), colnames(Dendritic.resting)))]
Cancer = data[,grep("ancer", colnames(data))]
Endothelial = grep("dothelial", colnames(data))
Endothelial = data[, Endothelial, drop = FALSE]
CAF = data[,grep("CAF", colnames(data))]
cell_types = list(B, Macrophages, M0, M1, M2, Monocytes, Neutrophils, NK, NK.activated, NK.resting, NKT, CD4, CD4.activated, CD4.resting, CD8, Tregs, Dendritic, Dendritic.activated,
Dendritic.resting, Cancer, Endothelial, CAF)
names(cell_types) = c("B", "MACROPHAGES", "M0", "M1", "M2", "MONOCYTES", "NEUTROPHILS", "NK", "NK.ACTIVATED", "NK.RESTING", "NKT", "CD4", "CD4.ACTIVATED", "CD4.RESTING",
"CD8", "TREGS", "DENDRITIC", "DENDRITIC.ACTIVATED", "DENDRITIC.RESTING", "CANCER", "ENDOTHELIAL", "CAF")
return(cell_types)
}
cells = compute_cell.types(data.frame(deconv))
#Pairwise correlation
removeCorrelatedFeatures <- function(data, threshold = 0.9) {
# Compute correlation matrix
corr_matrix <- cor(data)
# Find highly correlated features
high_corr_pairs <- findCorrelation(corr_matrix, cutoff = threshold, names = TRUE)
# Select only the variables to keep
new_data <- data.frame(data[, -which(colnames(data)%in%high_corr_pairs)])
if(ncol(new_data)==1){
colnames(new_data)[1] = colnames(data)[1]
}
return(new_data)
}
for (i in 1:length(cells)) {
data = cells[[i]]
if(ncol(data)>1){
data = removeCorrelatedFeatures(data)
cells[[i]] = data
}
}
remove_subgroups = function(groups){
lis = c()
for (pos in 1:length(groups)){
x = c()
if(length(groups[[pos]])!=0){
for (i in 1:length(groups[[pos]])) {
for (j in 1:length(groups[[pos]][[i]])) {
x =  c(x,str_split(groups[[pos]][[i]], "_")[[j]][[1]])
}
if(length(unique(x)) == 1){lis = c(lis, names(groups[[pos]])[[i]])}
}
}else{
pos = pos+1
}
}
return(lis)
}
compute_subgroups = function(data, file_name, thres_similarity = 0.05, thres_corr = 0.65, thres_change = 0.01){
data = data.frame(data)
if (ncol(data) < 2) {
warning("Data must have at least two columns for subgrouping.")
cell_subgroups = list()
subgroup = list()
lis = c()
return(list(data, cell_subgroups, subgroup, lis))
}else{
cell_subgroups = list()
lis = list()
###################################################################################################################Similarity part
is_similar <- function(value1, value2, threshold) {return(abs(value1 - value2) <= threshold)}
similarity_matrix <- matrix(FALSE, nrow = ncol(data), ncol = ncol(data), dimnames = list(names(data), names(data)))
for (col1 in names(data)) {
for (col2 in names(data)) {
similarity <- all(mapply(is_similar, data[[col1]], data[[col2]], MoreArgs = list(thres_similarity)))
similarity_matrix[col1, col2] <- similarity
}
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat, diag = T)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(similarity_matrix)
x <- melt(upper_tri) %>%
na.omit() %>%
mutate_all(as.character)
indice = 1
subgroup = list()
vec = unique(x$Var1)
while(length(vec)>0){
sub = x[which(x$Var1%in%vec[1]),]
sub = sub[which(sub$value==T),]
if(nrow(sub)!=0){
subgroup[[indice]] = c(vec[1], sub$Var2)
x = x[-which(x$Var1%in%subgroup[[indice]]),]
x = x[-which(x$Var2%in%subgroup[[indice]]),]
vec = vec[-which(vec%in%subgroup[[indice]])]
indice = indice + 1
}else{
indice = indice
vec = vec[-1]
}
}
if(length(subgroup)!=0){
#Name subgroups
for (i in 1:length(subgroup)){
names(subgroup)[i] = paste0(file_name, "_Subgroup.Similarity_", i)
}
lis = remove_subgroups(subgroup)
#Groups similarity
if(length(lis)>0){
for (i in 1:length(subgroup)) {
idx = which(names(subgroup[[i]])%in%lis)
if(length(idx)>0){
subgroup[[i]] = subgroup[[i]][-idx]
}
}
}
lis = subgroup
data_sub = c()
#Take average expression of subgroups
for(i in 1:length(subgroup)){ #Create data frame with features subgroupped
sub = data.frame(data[,colnames(data)%in%subgroup[[i]]]) #Map features that are inside each subgroup from input (deconvolution)
sub$average = rowMeans(sub) #Compute average of subgroup across patients
data_sub = data.frame(cbind(data_sub, sub$average)) #Save avg in a new data frame
colnames(data_sub)[i] = names(subgroup)[i]
name = colnames(data)[which(!(colnames(data)%in%subgroup[[i]]))]
data = data[,-which(colnames(data)%in%subgroup[[i]])] #Remove from deconvolution features that are subgrouped
if(ncol(data.frame(data))==1){
data = as.data.frame(data)
colnames(data)[1] = name
}
}
rownames(data_sub) = rownames(data) #List of patients
data_sub = data.frame(data_sub[,colnames(data_sub)%in%names(lis)])
colnames(data_sub) = names(lis)
data = cbind(data, data_sub) #Join subgroups in deconvolution file
k = 2
}else{
k = 3
}
if(ncol(data) == 1){
cell_subgroups = list()
return(list(data, cell_subgroups, subgroup, lis))
}
###################################################################################################################Correlation part
if(k==2 | k==3){
terminate = FALSE
iteration = 1
while (terminate == FALSE) {
corr_df <- correlation(data.matrix(data))
vec = colnames(data)
indice = 1
subgroup = list()
data_sub = c()
while(length(vec)>0){ #Keep running until no features are left
if(vec[1] %in% corr_df$measure1){ #Check if feature still no-grouped
tab = corr_df[corr_df$measure1 == vec[1],] #Take one feature against the others
tab = tab[tab$r>thres_corr,] #Select features corr above the threshold = 0.75
if(nrow(tab)!=0){ #If algorithm found features above corr
subgroup[[indice]] = c(vec[1], tab$measure2) #Save features as subgroup
idx = which(corr_df$measure1 %in% subgroup[[indice]])
if(length(idx)>0){corr_df = corr_df[-idx,]} #Remove features already subgroupped
idy = which(corr_df$measure2 %in% subgroup[[indice]])
if(length(idy)>0){corr_df = corr_df[-idy,]} #Remove features already subgroupped
#corr_df = corr_df[-which(corr_df$measure1 %in% subgroup[[indice]]),] #Remove features already subgroupped
vec = vec[-which(vec%in%subgroup[[indice]])] #Remove feature already subgroupped from vector
indice = indice + 1
}else{ #Condition when there is no correlation above the threshold (features no subgroupped)
corr_df = corr_df[-which(corr_df$measure1 == vec[1]),] #Remove variable from corr matrix to keep subgrouping the others
if(length(which(corr_df$measure2==vec[1]))>0){corr_df = corr_df[-which(corr_df$measure2 == vec[1]),]}
vec = vec[-1] #Remove variable from vector to keep analyzing the others
indice = indice #Not increase index cause no subgroup appeared
}
}else{ #If feature is not in corr matrix it means that there is no any significant correlation against it and other features
vec = vec[-1] #Remove variable from vector to keep analyzing the others
indice = indice  #Not increase index cause no subgroup appeared
}
}
if(length(subgroup)!=0){
#Name subgroups
for (i in 1:length(subgroup)){
names(subgroup)[i] = paste0(file_name, "_Subgroup_", i, "_Iteration_", iteration)
}
#Take average expression of subgroups
for(i in 1:length(subgroup)){ #Create data frame with features subgroupped
sub = data.frame(data[,colnames(data)%in%subgroup[[i]]]) #Map features that are inside each subgroup from input (deconvolution)
sub$average = rowMeans(sub) #Compute average of subgroup across patients
data_sub = data.frame(cbind(data_sub, sub$average)) #Save avg in a new data frame
colnames(data_sub)[i] = names(subgroup)[i]
name = colnames(data)[which(!(colnames(data)%in%subgroup[[i]]))]
data = data.frame(data[,-which(colnames(data)%in%subgroup[[i]])]) #Remove from deconvolution features that are subgrouped
if(ncol(data.frame(data))==1){
data = as.data.frame(data)
colnames(data)[1] = name
}
}
rownames(data_sub) = rownames(data) #List of patients
# new_average_values = colMeans(data.matrix(data_sub))
if(iteration == 1){ #Save what is inside the first subgroups
cell_subgroups = subgroup
data_sub = data.frame(data_sub[,colnames(data_sub)%in%names(cell_subgroups)])
colnames(data_sub) = names(cell_subgroups)
}
# #Compare averages and test if they are above certain threshold
# if(iteration == 1){
#   df = data
# }
#else{
#   for (i in 1:length(subgroup)) {
#     for (j in 1:length(idx)) {
#       change = max(abs(average_values[idx[j]] - new_average_values[i]))
#       if (change > thres_change) {
#         terminate <- TRUE
#       }
#     }
#   }
# }
# average_values = new_average_values
if(ncol(data)!=0){
data = cbind(data, data_sub)
}else{
data = data_sub
terminate = TRUE
}
iteration = iteration + 1
}else{
terminate = TRUE
#if(!is.null(tryCatch(eval(parse(text = df)), error = function(e) NULL))==F){
#df = data
#}
}
}
if(is.null(data_sub)==TRUE){
data = data
}else{
data = cbind(data, data_sub)
}
idx = which(duplicated(t(data)))
if(length(idx)>0){
names = colnames(data)[idx]
data = data.frame(data[,-idx])
if(ncol(data)==1){
colnames(data)[1] = names
}
}
}
#lis = remove_subgroups(cell
return(list(data, cell_subgroups, subgroup, lis))
}
}
res = list()
groups = list()
groups_similarity = list()
for (i in 1:length(cells)) {
x = compute_subgroups(cells[[i]], names(cells)[i])
res = c(res, x[1])
groups = c(groups, x[2])
groups_similarity = c(groups_similarity, x[4])
}
names_cells = c("B", "MACROPHAGES", "M0", "M1", "M2", "MONOCYTES", "NEUTROPHILS", "NK", "NK.ACTIVATED", "NK.RESTING", "NKT", "CD4", "CD4.ACTIVATED", "CD4.RESTING",
"CD8", "TREGS", "DENDRITIC", "DENDRITIC.ACTIVATED", "DENDRITIC.RESTING", "CANCER", "ENDOTHELIAL", "CAF")
names(res) = names_cells
names(groups) = names_cells
names(groups_similarity) = names_cells
#Res and Groups
ls = remove_subgroups(groups)
for (i in 1:length(groups)) {
idx = which(names(groups[[i]])%in%ls)
idy = which(names(res[[i]])%in%ls)
if(length(idx)>0){
groups[[i]] = groups[[i]][-idx]
res[[i]] = res[[i]][-idy]
}
}
#Output deconvolution
dt = c()
for (i in 1:length(res)) {
dt = c(dt, res[[i]])
}
dt = data.frame(dt)
rownames(dt) = rownames(deconv)
saveRDS(res, "Groups_cells_all_EARLYSTAGE.rds")
saveRDS(groups, "Groups_cells_correlation_EARLYSTAGE.rds")
saveRDS(groups_similarity, "Groups_cells_similarity_EARLYSTAGE.rds")
write.csv(dt, "Deconvolution_after_EARLY_STAGE.csv")
cell_groups = readRDS(paste0(getwd(), "/Figures/Heatmaps/New2/Cell_groups_EARLYSTAGE.rds"))
res = readRDS(paste0(getwd(), "/Figures/Heatmaps/New2/Groups_cells_all_EARLYSTAGE.rds"))
groups_corr = readRDS(paste0(getwd(), "/Figures/Heatmaps/New2/Groups_cells_correlation_EARLYSTAGE.rds"))
groups_simi = readRDS(paste0(getwd(), "/Figures/Heatmaps/New2/Groups_cells_similarity_EARLYSTAGE.rds"))
View(groups_corr)
View(res)
deconv <- read.csv(paste0(getwd(), "/Input/Deconvolution/Deconvolution_Maha.csv"), row.names = 1, sep=",")
for (i in 1:length(groups_simi)) {
if(length(groups_simi[[i]])!=0){
for (j in 1:length(groups_simi[[i]])) {
idx = which(colnames(deconv)%in%groups_simi[[i]][[j]])
sub = data.frame(deconv[,idx])
sub$average = rowMeans(sub)
deconv = deconv[,-idx]
deconv <- deconv %>%
mutate(new_column = sub$average) %>%
rename(!!names(groups_simi[[i]][j]) := new_column)
}
}
}
for (i in 1:length(groups_corr)) {
if(length(groups_corr[[i]])!=0){
for (j in 1:length(groups_corr[[i]])) {
idx = which(colnames(deconv)%in%groups_corr[[i]][[j]])
sub = data.frame(deconv[,idx])
sub$average = rowMeans(sub)
deconv = deconv[,-idx]
deconv <- deconv %>%
mutate(new_column = sub$average) %>%
rename(!!names(groups_corr[[i]][j]) := new_column)
}
}
}
data = data.frame()
deconv_df <- data.frame(matrix(ncol = 0, nrow = 18))
for (i in 1:length(res)) {
if(length(res[[i]])!=0){
for (j in 1:length(res[[i]])) {
idx = which(colnames(deconv)%in%res[[i]][[j]])
data = data.frame(rowMeans(data.frame(deconv[,idx])))
colnames(data)[1] = names(res[[i]][j])
deconv_df = cbind(deconv_df, data)
}
}
}
View(deconv_df)
deconv <- read.csv(paste0(getwd(), "/Input/Deconvolution/Deconvolution_Maha.csv"), row.names = 1, sep=",")
for (i in 1:length(groups_simi)) {
if(length(groups_simi[[i]])!=0){
for (j in 1:length(groups_simi[[i]])) {
idx = which(colnames(deconv)%in%groups_simi[[i]][[j]])
sub = data.frame(deconv[,idx])
sub$average = rowMeans(sub)
deconv = deconv[,-idx]
deconv <- deconv %>%
mutate(new_column = sub$average) %>%
rename(!!names(groups_simi[[i]][j]) := new_column)
}
}
}
for (i in 1:length(groups_corr)) {
if(length(groups_corr[[i]])!=0){
for (j in 1:length(groups_corr[[i]])) {
idx = which(colnames(deconv)%in%groups_corr[[i]][[j]])
sub = data.frame(deconv[,idx])
sub$average = rowMeans(sub)
deconv = deconv[,-idx]
deconv <- deconv %>%
mutate(new_column = sub$average) %>%
rename(!!names(groups_corr[[i]][j]) := new_column)
}
}
}
data = data.frame()
deconv_df <- data.frame(matrix(ncol = 0, nrow = 18))
length(res)
length(res[[1]])
View(res)
i = 1
j = 3
res[[1]][[3]]
names(res[[1]][3])
res[[1]][3]
colnames(res[[1]])
names(res[[1]])
names(res[[2]])
names(res[[3]])
idx = which(colnames(deconv)%in%names(res[[3]]))
idx = which(colnames(deconv)%in%names(res[[2]]))
idx = which(colnames(deconv)%in%names(res[[3]]))
data = deconv[, idx]
data = data.frame(deconv[,idx])
View(data)
names(res[[3]])
colnames(data)[1] = names(res[[i]])
View(data)
colnames(data)[1] = names(res[[3]])
deconv <- read.csv(paste0(getwd(), "/Input/Deconvolution/Deconvolution_Maha.csv"), row.names = 1, sep=",")
for (i in 1:length(groups_simi)) {
if(length(groups_simi[[i]])!=0){
for (j in 1:length(groups_simi[[i]])) {
idx = which(colnames(deconv)%in%groups_simi[[i]][[j]])
sub = data.frame(deconv[,idx])
sub$average = rowMeans(sub)
deconv = deconv[,-idx]
deconv <- deconv %>%
mutate(new_column = sub$average) %>%
rename(!!names(groups_simi[[i]][j]) := new_column)
}
}
}
for (i in 1:length(groups_corr)) {
if(length(groups_corr[[i]])!=0){
for (j in 1:length(groups_corr[[i]])) {
idx = which(colnames(deconv)%in%groups_corr[[i]][[j]])
sub = data.frame(deconv[,idx])
sub$average = rowMeans(sub)
deconv = deconv[,-idx]
deconv <- deconv %>%
mutate(new_column = sub$average) %>%
rename(!!names(groups_corr[[i]][j]) := new_column)
}
}
}
data = data.frame()
deconv_df <- data.frame(matrix(ncol = 0, nrow = 18))
for (i in 1:length(res)) {
idx = which(colnames(deconv)%in%names(res[[i]]))
if(length(idx)>0){
data = data.frame(deconv[,idx])
if(ncol(data)==1){
colnames(data)[1] = names(res[[i]])
}
deconv_df = cbind(deconv_df, data)
}
}
View(deconv_df)
which(colnames(dt)!=colnames(deconv_df))
View(dt)
which(!colnames(dt)%in%colnames(deconv_df))
idx = which(!colnames(dt)%in%colnames(deconv_df))
colnames(dt)[idx]
View(groups_corr)
groups_corr[["B"]][["B_Subgroup_2_Iteration_1"]]
y = colnames(dt)[idx]
which(colnames(deconv)%in%y)
View(deconv)
y
colnames(deconv)
which(colnames(deconv)%in%y)
colnames(deconv)
which(colnames(deconv)==y)
View(deconv_df)
View(cell_groups)
length(cell_groups)
cell_groups[[1]]
i =1
idx = which(colnames(deconv_df)%in%cell_groups[[i]])
sub = data.frame(deconv_df[,idx])
sub$average = rowMeans(sub)
deconv_df = deconv_df[,-idx]
deconv_df = deconv_df[,-idx]
deconv_df <- deconv_df %>%
mutate(paste0("Cluster_", i) = sub$average)
deconv_df <- deconv_df %>%
mutate(new_column = sub$average) %>%
rename(!!paste0("Cluster_", i) := new_column)
View(deconv_df)
deconv <- read.csv(paste0(getwd(), "/Input/Deconvolution/Deconvolution_Maha.csv"), row.names = 1, sep=",")
cell_groups = readRDS(paste0(getwd(), "/Figures/Heatmaps/New2/Cell_groups_EARLYSTAGE.rds"))
res = readRDS(paste0(getwd(), "/Figures/Heatmaps/New2/Groups_cells_all_EARLYSTAGE.rds"))
groups_corr = readRDS(paste0(getwd(), "/Figures/Heatmaps/New2/Groups_cells_correlation_EARLYSTAGE.rds"))
groups_simi = readRDS(paste0(getwd(), "/Figures/Heatmaps/New2/Groups_cells_similarity_EARLYSTAGE.rds"))
for (i in 1:length(groups_simi)) {
if(length(groups_simi[[i]])!=0){
for (j in 1:length(groups_simi[[i]])) {
idx = which(colnames(deconv)%in%groups_simi[[i]][[j]])
sub = data.frame(deconv[,idx])
sub$average = rowMeans(sub)
deconv = deconv[,-idx]
deconv <- deconv %>%
mutate(new_column = sub$average) %>%
rename(!!names(groups_simi[[i]][j]) := new_column)
}
}
}
for (i in 1:length(groups_corr)) {
if(length(groups_corr[[i]])!=0){
for (j in 1:length(groups_corr[[i]])) {
idx = which(colnames(deconv)%in%groups_corr[[i]][[j]])
sub = data.frame(deconv[,idx])
sub$average = rowMeans(sub)
deconv = deconv[,-idx]
deconv <- deconv %>%
mutate(new_column = sub$average) %>%
rename(!!names(groups_corr[[i]][j]) := new_column)
}
}
}
data = data.frame()
deconv_df <- data.frame(matrix(ncol = 0, nrow = 18))
for (i in 1:length(res)) {
idx = which(colnames(deconv)%in%names(res[[i]]))
if(length(idx)>0){
data = data.frame(deconv[,idx])
if(ncol(data)==1){
colnames(data)[1] = names(res[[i]])
}
deconv_df = cbind(deconv_df, data)
}
}
for (i in 1:length(cell_groups)) {
idx = which(colnames(deconv_df)%in%cell_groups[[i]])
sub = data.frame(deconv_df[,idx])
sub$average = rowMeans(sub)
deconv_df = deconv_df[,-idx]
deconv_df <- deconv_df %>%
mutate(new_column = sub$average) %>%
rename(!!paste0("Cluster_", i) := new_column)
}
View(cell_groups)
clinical.data <- read.csv(paste0(getwd(), "/Input/ClinicalData/ClinicalData_Maha.csv"), row.names = 1, sep=",")
View(clinical.data)
View(deconv_df)
ha <- HeatmapAnnotation(Response = clinical.data$response, col = list(Response = c("Responders" = "green", "Non responders"= "red")))
ha <- HeatmapAnnotation(Response = clinical.data$Response, col = list(Response = c("Responders" = "green", "Non responders"= "red")))
png(paste0(getwd(),"/Figures/Heatmaps/New3/Maha.png"), width = 6000, height = 4500, res=250)
Heatmap(t(scale(deconv_df)), clustering_method_columns = "ward.D2", top_annotation = ha, width = unit(30, "cm"), height = unit(35, "cm"), column_dend_height = unit(5, "cm"), show_heatmap_legend = F)
dev.off()
